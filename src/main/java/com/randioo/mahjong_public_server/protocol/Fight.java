// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fight.proto

package com.randioo.mahjong_public_server.protocol;

public final class Fight {
  private Fight() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class FightExitGameRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightExitGameRequest.newBuilder() to construct.
    private FightExitGameRequest() {
      initFields();
    }
    private FightExitGameRequest(boolean noInit) {}
    
    private static final FightExitGameRequest defaultInstance;
    public static FightExitGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightExitGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightExitGameRequest)
    }
    
    static {
      defaultInstance = new FightExitGameRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightExitGameRequest)
  }
  
  public static final class FightExitGameResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightExitGameResponse.newBuilder() to construct.
    private FightExitGameResponse() {
      initFields();
    }
    private FightExitGameResponse(boolean noInit) {}
    
    private static final FightExitGameResponse defaultInstance;
    public static FightExitGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightExitGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightExitGameResponse)
    }
    
    static {
      defaultInstance = new FightExitGameResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightExitGameResponse)
  }
  
  public static final class FightApplyExitGameRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightApplyExitGameRequest.newBuilder() to construct.
    private FightApplyExitGameRequest() {
      initFields();
    }
    private FightApplyExitGameRequest(boolean noInit) {}
    
    private static final FightApplyExitGameRequest defaultInstance;
    public static FightApplyExitGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightApplyExitGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightApplyExitGameRequest)
    }
    
    static {
      defaultInstance = new FightApplyExitGameRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightApplyExitGameRequest)
  }
  
  public static final class FightApplyExitGameResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightApplyExitGameResponse.newBuilder() to construct.
    private FightApplyExitGameResponse() {
      initFields();
    }
    private FightApplyExitGameResponse(boolean noInit) {}
    
    private static final FightApplyExitGameResponse defaultInstance;
    public static FightApplyExitGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightApplyExitGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightApplyExitGameResponse)
    }
    
    static {
      defaultInstance = new FightApplyExitGameResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightApplyExitGameResponse)
  }
  
  public static final class SCFightExitGame extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightExitGame.newBuilder() to construct.
    private SCFightExitGame() {
      initFields();
    }
    private SCFightExitGame(boolean noInit) {}
    
    private static final SCFightExitGame defaultInstance;
    public static SCFightExitGame getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightExitGame getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightExitGame)
    }
    
    static {
      defaultInstance = new SCFightExitGame(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightExitGame)
  }
  
  public static final class SCFightRoomDismiss extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightRoomDismiss.newBuilder() to construct.
    private SCFightRoomDismiss() {
      initFields();
    }
    private SCFightRoomDismiss(boolean noInit) {}
    
    private static final SCFightRoomDismiss defaultInstance;
    public static SCFightRoomDismiss getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightRoomDismiss getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightRoomDismiss)
    }
    
    static {
      defaultInstance = new SCFightRoomDismiss(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightRoomDismiss)
  }
  
  public static final class FightConfirmGameOverRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightConfirmGameOverRequest.newBuilder() to construct.
    private FightConfirmGameOverRequest() {
      initFields();
    }
    private FightConfirmGameOverRequest(boolean noInit) {}
    
    private static final FightConfirmGameOverRequest defaultInstance;
    public static FightConfirmGameOverRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightConfirmGameOverRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightConfirmGameOverRequest)
    }
    
    static {
      defaultInstance = new FightConfirmGameOverRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightConfirmGameOverRequest)
  }
  
  public static final class FightConfirmGameOverResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightConfirmGameOverResponse.newBuilder() to construct.
    private FightConfirmGameOverResponse() {
      initFields();
    }
    private FightConfirmGameOverResponse(boolean noInit) {}
    
    private static final FightConfirmGameOverResponse defaultInstance;
    public static FightConfirmGameOverResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightConfirmGameOverResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightConfirmGameOverResponse)
    }
    
    static {
      defaultInstance = new FightConfirmGameOverResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightConfirmGameOverResponse)
  }
  
  public static final class SCFightApplyExitGame extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightApplyExitGame.newBuilder() to construct.
    private SCFightApplyExitGame() {
      initFields();
    }
    private SCFightApplyExitGame(boolean noInit) {}
    
    private static final SCFightApplyExitGame defaultInstance;
    public static SCFightApplyExitGame getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightApplyExitGame getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_fieldAccessorTable;
    }
    
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // optional int32 countDown = 2;
    public static final int COUNTDOWN_FIELD_NUMBER = 2;
    private boolean hasCountDown;
    private int countDown_ = 0;
    public boolean hasCountDown() { return hasCountDown; }
    public int getCountDown() { return countDown_; }
    
    // optional int32 applyExitId = 3;
    public static final int APPLYEXITID_FIELD_NUMBER = 3;
    private boolean hasApplyExitId;
    private int applyExitId_ = 0;
    public boolean hasApplyExitId() { return hasApplyExitId; }
    public int getApplyExitId() { return applyExitId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      if (hasCountDown()) {
        output.writeInt32(2, getCountDown());
      }
      if (hasApplyExitId()) {
        output.writeInt32(3, getApplyExitId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (hasCountDown()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCountDown());
      }
      if (hasApplyExitId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getApplyExitId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasCountDown()) {
          setCountDown(other.getCountDown());
        }
        if (other.hasApplyExitId()) {
          setApplyExitId(other.getApplyExitId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
            case 16: {
              setCountDown(input.readInt32());
              break;
            }
            case 24: {
              setApplyExitId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // optional int32 countDown = 2;
      public boolean hasCountDown() {
        return result.hasCountDown();
      }
      public int getCountDown() {
        return result.getCountDown();
      }
      public Builder setCountDown(int value) {
        result.hasCountDown = true;
        result.countDown_ = value;
        return this;
      }
      public Builder clearCountDown() {
        result.hasCountDown = false;
        result.countDown_ = 0;
        return this;
      }
      
      // optional int32 applyExitId = 3;
      public boolean hasApplyExitId() {
        return result.hasApplyExitId();
      }
      public int getApplyExitId() {
        return result.getApplyExitId();
      }
      public Builder setApplyExitId(int value) {
        result.hasApplyExitId = true;
        result.applyExitId_ = value;
        return this;
      }
      public Builder clearApplyExitId() {
        result.hasApplyExitId = false;
        result.applyExitId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightApplyExitGame)
    }
    
    static {
      defaultInstance = new SCFightApplyExitGame(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightApplyExitGame)
  }
  
  public static final class FightAgreeExitGameRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightAgreeExitGameRequest.newBuilder() to construct.
    private FightAgreeExitGameRequest() {
      initFields();
    }
    private FightAgreeExitGameRequest(boolean noInit) {}
    
    private static final FightAgreeExitGameRequest defaultInstance;
    public static FightAgreeExitGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightAgreeExitGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_fieldAccessorTable;
    }
    
    // optional .com.randioo.mahjong_public_server.protocol.FightVoteApplyExit fightVoteApplyExit = 1;
    public static final int FIGHTVOTEAPPLYEXIT_FIELD_NUMBER = 1;
    private boolean hasFightVoteApplyExit;
    private com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit fightVoteApplyExit_;
    public boolean hasFightVoteApplyExit() { return hasFightVoteApplyExit; }
    public com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit getFightVoteApplyExit() { return fightVoteApplyExit_; }
    
    // optional int32 applyExitId = 2;
    public static final int APPLYEXITID_FIELD_NUMBER = 2;
    private boolean hasApplyExitId;
    private int applyExitId_ = 0;
    public boolean hasApplyExitId() { return hasApplyExitId; }
    public int getApplyExitId() { return applyExitId_; }
    
    private void initFields() {
      fightVoteApplyExit_ = com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit.VOTE_IDLE;
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFightVoteApplyExit()) {
        output.writeEnum(1, getFightVoteApplyExit().getNumber());
      }
      if (hasApplyExitId()) {
        output.writeInt32(2, getApplyExitId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFightVoteApplyExit()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getFightVoteApplyExit().getNumber());
      }
      if (hasApplyExitId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getApplyExitId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.getDefaultInstance()) return this;
        if (other.hasFightVoteApplyExit()) {
          setFightVoteApplyExit(other.getFightVoteApplyExit());
        }
        if (other.hasApplyExitId()) {
          setApplyExitId(other.getApplyExitId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit value = com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setFightVoteApplyExit(value);
              }
              break;
            }
            case 16: {
              setApplyExitId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional .com.randioo.mahjong_public_server.protocol.FightVoteApplyExit fightVoteApplyExit = 1;
      public boolean hasFightVoteApplyExit() {
        return result.hasFightVoteApplyExit();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit getFightVoteApplyExit() {
        return result.getFightVoteApplyExit();
      }
      public Builder setFightVoteApplyExit(com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasFightVoteApplyExit = true;
        result.fightVoteApplyExit_ = value;
        return this;
      }
      public Builder clearFightVoteApplyExit() {
        result.hasFightVoteApplyExit = false;
        result.fightVoteApplyExit_ = com.randioo.mahjong_public_server.protocol.Entity.FightVoteApplyExit.VOTE_IDLE;
        return this;
      }
      
      // optional int32 applyExitId = 2;
      public boolean hasApplyExitId() {
        return result.hasApplyExitId();
      }
      public int getApplyExitId() {
        return result.getApplyExitId();
      }
      public Builder setApplyExitId(int value) {
        result.hasApplyExitId = true;
        result.applyExitId_ = value;
        return this;
      }
      public Builder clearApplyExitId() {
        result.hasApplyExitId = false;
        result.applyExitId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightAgreeExitGameRequest)
    }
    
    static {
      defaultInstance = new FightAgreeExitGameRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightAgreeExitGameRequest)
  }
  
  public static final class FightAgreeExitGameResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightAgreeExitGameResponse.newBuilder() to construct.
    private FightAgreeExitGameResponse() {
      initFields();
    }
    private FightAgreeExitGameResponse(boolean noInit) {}
    
    private static final FightAgreeExitGameResponse defaultInstance;
    public static FightAgreeExitGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightAgreeExitGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightAgreeExitGameResponse)
    }
    
    static {
      defaultInstance = new FightAgreeExitGameResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightAgreeExitGameResponse)
  }
  
  public static final class SCFightApplyExitResult extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightApplyExitResult.newBuilder() to construct.
    private SCFightApplyExitResult() {
      initFields();
    }
    private SCFightApplyExitResult(boolean noInit) {}
    
    private static final SCFightApplyExitResult defaultInstance;
    public static SCFightApplyExitResult getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightApplyExitResult getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_fieldAccessorTable;
    }
    
    // repeated string rejectName = 1;
    public static final int REJECTNAME_FIELD_NUMBER = 1;
    private java.util.List<java.lang.String> rejectName_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getRejectNameList() {
      return rejectName_;
    }
    public int getRejectNameCount() { return rejectName_.size(); }
    public java.lang.String getRejectName(int index) {
      return rejectName_.get(index);
    }
    
    // repeated string agreeName = 2;
    public static final int AGREENAME_FIELD_NUMBER = 2;
    private java.util.List<java.lang.String> agreeName_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getAgreeNameList() {
      return agreeName_;
    }
    public int getAgreeNameCount() { return agreeName_.size(); }
    public java.lang.String getAgreeName(int index) {
      return agreeName_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (java.lang.String element : getRejectNameList()) {
        output.writeString(1, element);
      }
      for (java.lang.String element : getAgreeNameList()) {
        output.writeString(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (java.lang.String element : getRejectNameList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getRejectNameList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getAgreeNameList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getAgreeNameList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.rejectName_ != java.util.Collections.EMPTY_LIST) {
          result.rejectName_ =
            java.util.Collections.unmodifiableList(result.rejectName_);
        }
        if (result.agreeName_ != java.util.Collections.EMPTY_LIST) {
          result.agreeName_ =
            java.util.Collections.unmodifiableList(result.agreeName_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.getDefaultInstance()) return this;
        if (!other.rejectName_.isEmpty()) {
          if (result.rejectName_.isEmpty()) {
            result.rejectName_ = new java.util.ArrayList<java.lang.String>();
          }
          result.rejectName_.addAll(other.rejectName_);
        }
        if (!other.agreeName_.isEmpty()) {
          if (result.agreeName_.isEmpty()) {
            result.agreeName_ = new java.util.ArrayList<java.lang.String>();
          }
          result.agreeName_.addAll(other.agreeName_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              addRejectName(input.readString());
              break;
            }
            case 18: {
              addAgreeName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // repeated string rejectName = 1;
      public java.util.List<java.lang.String> getRejectNameList() {
        return java.util.Collections.unmodifiableList(result.rejectName_);
      }
      public int getRejectNameCount() {
        return result.getRejectNameCount();
      }
      public java.lang.String getRejectName(int index) {
        return result.getRejectName(index);
      }
      public Builder setRejectName(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.rejectName_.set(index, value);
        return this;
      }
      public Builder addRejectName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.rejectName_.isEmpty()) {
          result.rejectName_ = new java.util.ArrayList<java.lang.String>();
        }
        result.rejectName_.add(value);
        return this;
      }
      public Builder addAllRejectName(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.rejectName_.isEmpty()) {
          result.rejectName_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.rejectName_);
        return this;
      }
      public Builder clearRejectName() {
        result.rejectName_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string agreeName = 2;
      public java.util.List<java.lang.String> getAgreeNameList() {
        return java.util.Collections.unmodifiableList(result.agreeName_);
      }
      public int getAgreeNameCount() {
        return result.getAgreeNameCount();
      }
      public java.lang.String getAgreeName(int index) {
        return result.getAgreeName(index);
      }
      public Builder setAgreeName(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.agreeName_.set(index, value);
        return this;
      }
      public Builder addAgreeName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.agreeName_.isEmpty()) {
          result.agreeName_ = new java.util.ArrayList<java.lang.String>();
        }
        result.agreeName_.add(value);
        return this;
      }
      public Builder addAllAgreeName(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.agreeName_.isEmpty()) {
          result.agreeName_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.agreeName_);
        return this;
      }
      public Builder clearAgreeName() {
        result.agreeName_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightApplyExitResult)
    }
    
    static {
      defaultInstance = new SCFightApplyExitResult(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightApplyExitResult)
  }
  
  public static final class SCFightClearRoomId extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightClearRoomId.newBuilder() to construct.
    private SCFightClearRoomId() {
      initFields();
    }
    private SCFightClearRoomId(boolean noInit) {}
    
    private static final SCFightClearRoomId defaultInstance;
    public static SCFightClearRoomId getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightClearRoomId getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightClearRoomId)
    }
    
    static {
      defaultInstance = new SCFightClearRoomId(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightClearRoomId)
  }
  
  public static final class SCFightLoadResource extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightLoadResource.newBuilder() to construct.
    private SCFightLoadResource() {
      initFields();
    }
    private SCFightLoadResource(boolean noInit) {}
    
    private static final SCFightLoadResource defaultInstance;
    public static SCFightLoadResource getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightLoadResource getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightLoadResource)
    }
    
    static {
      defaultInstance = new SCFightLoadResource(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightLoadResource)
  }
  
  public static final class FightReadyRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightReadyRequest.newBuilder() to construct.
    private FightReadyRequest() {
      initFields();
    }
    private FightReadyRequest(boolean noInit) {}
    
    private static final FightReadyRequest defaultInstance;
    public static FightReadyRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightReadyRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightReadyRequest)
    }
    
    static {
      defaultInstance = new FightReadyRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightReadyRequest)
  }
  
  public static final class FightReadyResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightReadyResponse.newBuilder() to construct.
    private FightReadyResponse() {
      initFields();
    }
    private FightReadyResponse(boolean noInit) {}
    
    private static final FightReadyResponse defaultInstance;
    public static FightReadyResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightReadyResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightReadyResponse)
    }
    
    static {
      defaultInstance = new FightReadyResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightReadyResponse)
  }
  
  public static final class SCFightNoticeReady extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightNoticeReady.newBuilder() to construct.
    private SCFightNoticeReady() {
      initFields();
    }
    private SCFightNoticeReady(boolean noInit) {}
    
    private static final SCFightNoticeReady defaultInstance;
    public static SCFightNoticeReady getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightNoticeReady getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeReady)
    }
    
    static {
      defaultInstance = new SCFightNoticeReady(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeReady)
  }
  
  public static final class SCFightReady extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightReady.newBuilder() to construct.
    private SCFightReady() {
      initFields();
    }
    private SCFightReady(boolean noInit) {}
    
    private static final SCFightReady defaultInstance;
    public static SCFightReady getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightReady getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightReady parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightReady prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightReady result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightReady();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightReady internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightReady();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightReady getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightReady build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightReady buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightReady buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightReady returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightReady) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightReady)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightReady other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightReady)
    }
    
    static {
      defaultInstance = new SCFightReady(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightReady)
  }
  
  public static final class FightGetlastRoundRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGetlastRoundRequest.newBuilder() to construct.
    private FightGetlastRoundRequest() {
      initFields();
    }
    private FightGetlastRoundRequest(boolean noInit) {}
    
    private static final FightGetlastRoundRequest defaultInstance;
    public static FightGetlastRoundRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGetlastRoundRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGetlastRoundRequest)
    }
    
    static {
      defaultInstance = new FightGetlastRoundRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGetlastRoundRequest)
  }
  
  public static final class FightGetlastRoundResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGetlastRoundResponse.newBuilder() to construct.
    private FightGetlastRoundResponse() {
      initFields();
    }
    private FightGetlastRoundResponse(boolean noInit) {}
    
    private static final FightGetlastRoundResponse defaultInstance;
    public static FightGetlastRoundResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGetlastRoundResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    // repeated .com.randioo.mahjong_public_server.protocol.Record records = 2;
    public static final int RECORDS_FIELD_NUMBER = 2;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.Record> records_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.Record> getRecordsList() {
      return records_;
    }
    public int getRecordsCount() { return records_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.Record getRecords(int index) {
      return records_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.Record element : getRecordsList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.Record element : getRecordsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.records_ != java.util.Collections.EMPTY_LIST) {
          result.records_ =
            java.util.Collections.unmodifiableList(result.records_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (!other.records_.isEmpty()) {
          if (result.records_.isEmpty()) {
            result.records_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.Record>();
          }
          result.records_.addAll(other.records_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.Record.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.Record.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRecords(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.Record records = 2;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.Record> getRecordsList() {
        return java.util.Collections.unmodifiableList(result.records_);
      }
      public int getRecordsCount() {
        return result.getRecordsCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.Record getRecords(int index) {
        return result.getRecords(index);
      }
      public Builder setRecords(int index, com.randioo.mahjong_public_server.protocol.Entity.Record value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.records_.set(index, value);
        return this;
      }
      public Builder setRecords(int index, com.randioo.mahjong_public_server.protocol.Entity.Record.Builder builderForValue) {
        result.records_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRecords(com.randioo.mahjong_public_server.protocol.Entity.Record value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.records_.isEmpty()) {
          result.records_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.Record>();
        }
        result.records_.add(value);
        return this;
      }
      public Builder addRecords(com.randioo.mahjong_public_server.protocol.Entity.Record.Builder builderForValue) {
        if (result.records_.isEmpty()) {
          result.records_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.Record>();
        }
        result.records_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRecords(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.Record> values) {
        if (result.records_.isEmpty()) {
          result.records_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.Record>();
        }
        super.addAll(values, result.records_);
        return this;
      }
      public Builder clearRecords() {
        result.records_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGetlastRoundResponse)
    }
    
    static {
      defaultInstance = new FightGetlastRoundResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGetlastRoundResponse)
  }
  
  public static final class FightRecommandRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightRecommandRequest.newBuilder() to construct.
    private FightRecommandRequest() {
      initFields();
    }
    private FightRecommandRequest(boolean noInit) {}
    
    private static final FightRecommandRequest defaultInstance;
    public static FightRecommandRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightRecommandRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightRecommandRequest)
    }
    
    static {
      defaultInstance = new FightRecommandRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightRecommandRequest)
  }
  
  public static final class FightRecommandResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightRecommandResponse.newBuilder() to construct.
    private FightRecommandResponse() {
      initFields();
    }
    private FightRecommandResponse(boolean noInit) {}
    
    private static final FightRecommandResponse defaultInstance;
    public static FightRecommandResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightRecommandResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    // repeated .com.randioo.mahjong_public_server.protocol.RecommandPai recommandPai = 2;
    public static final int RECOMMANDPAI_FIELD_NUMBER = 2;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai> recommandPai_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai> getRecommandPaiList() {
      return recommandPai_;
    }
    public int getRecommandPaiCount() { return recommandPai_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.RecommandPai getRecommandPai(int index) {
      return recommandPai_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.RecommandPai element : getRecommandPaiList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.RecommandPai element : getRecommandPaiList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.recommandPai_ != java.util.Collections.EMPTY_LIST) {
          result.recommandPai_ =
            java.util.Collections.unmodifiableList(result.recommandPai_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (!other.recommandPai_.isEmpty()) {
          if (result.recommandPai_.isEmpty()) {
            result.recommandPai_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai>();
          }
          result.recommandPai_.addAll(other.recommandPai_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRecommandPai(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.RecommandPai recommandPai = 2;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai> getRecommandPaiList() {
        return java.util.Collections.unmodifiableList(result.recommandPai_);
      }
      public int getRecommandPaiCount() {
        return result.getRecommandPaiCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RecommandPai getRecommandPai(int index) {
        return result.getRecommandPai(index);
      }
      public Builder setRecommandPai(int index, com.randioo.mahjong_public_server.protocol.Entity.RecommandPai value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.recommandPai_.set(index, value);
        return this;
      }
      public Builder setRecommandPai(int index, com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.Builder builderForValue) {
        result.recommandPai_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRecommandPai(com.randioo.mahjong_public_server.protocol.Entity.RecommandPai value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.recommandPai_.isEmpty()) {
          result.recommandPai_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai>();
        }
        result.recommandPai_.add(value);
        return this;
      }
      public Builder addRecommandPai(com.randioo.mahjong_public_server.protocol.Entity.RecommandPai.Builder builderForValue) {
        if (result.recommandPai_.isEmpty()) {
          result.recommandPai_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai>();
        }
        result.recommandPai_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRecommandPai(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.RecommandPai> values) {
        if (result.recommandPai_.isEmpty()) {
          result.recommandPai_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RecommandPai>();
        }
        super.addAll(values, result.recommandPai_);
        return this;
      }
      public Builder clearRecommandPai() {
        result.recommandPai_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightRecommandResponse)
    }
    
    static {
      defaultInstance = new FightRecommandResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightRecommandResponse)
  }
  
  public static final class SCFightStart extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightStart.newBuilder() to construct.
    private SCFightStart() {
      initFields();
    }
    private SCFightStart(boolean noInit) {}
    
    private static final SCFightStart defaultInstance;
    public static SCFightStart getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightStart getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.FightStartRoleData fightStartRoleData = 1;
    public static final int FIGHTSTARTROLEDATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData> fightStartRoleData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData> getFightStartRoleDataList() {
      return fightStartRoleData_;
    }
    public int getFightStartRoleDataCount() { return fightStartRoleData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData getFightStartRoleData(int index) {
      return fightStartRoleData_.get(index);
    }
    
    // optional int32 remainCardCount = 2;
    public static final int REMAINCARDCOUNT_FIELD_NUMBER = 2;
    private boolean hasRemainCardCount;
    private int remainCardCount_ = 0;
    public boolean hasRemainCardCount() { return hasRemainCardCount; }
    public int getRemainCardCount() { return remainCardCount_; }
    
    // optional int32 zhuangSeat = 3;
    public static final int ZHUANGSEAT_FIELD_NUMBER = 3;
    private boolean hasZhuangSeat;
    private int zhuangSeat_ = 0;
    public boolean hasZhuangSeat() { return hasZhuangSeat; }
    public int getZhuangSeat() { return zhuangSeat_; }
    
    // optional int32 baidaCard = 4;
    public static final int BAIDACARD_FIELD_NUMBER = 4;
    private boolean hasBaidaCard;
    private int baidaCard_ = 0;
    public boolean hasBaidaCard() { return hasBaidaCard; }
    public int getBaidaCard() { return baidaCard_; }
    
    // repeated int32 dice = 5;
    public static final int DICE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> dice_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getDiceList() {
      return dice_;
    }
    public int getDiceCount() { return dice_.size(); }
    public int getDice(int index) {
      return dice_.get(index);
    }
    
    // optional int32 remainHuangFan = 6;
    public static final int REMAINHUANGFAN_FIELD_NUMBER = 6;
    private boolean hasRemainHuangFan;
    private int remainHuangFan_ = 0;
    public boolean hasRemainHuangFan() { return hasRemainHuangFan; }
    public int getRemainHuangFan() { return remainHuangFan_; }
    
    // optional int32 currentRoundNum = 7;
    public static final int CURRENTROUNDNUM_FIELD_NUMBER = 7;
    private boolean hasCurrentRoundNum;
    private int currentRoundNum_ = 0;
    public boolean hasCurrentRoundNum() { return hasCurrentRoundNum; }
    public int getCurrentRoundNum() { return currentRoundNum_; }
    
    // optional int32 maxRound = 8;
    public static final int MAXROUND_FIELD_NUMBER = 8;
    private boolean hasMaxRound;
    private int maxRound_ = 0;
    public boolean hasMaxRound() { return hasMaxRound; }
    public int getMaxRound() { return maxRound_; }
    
    // optional int32 firstBaiDaCard = 9;
    public static final int FIRSTBAIDACARD_FIELD_NUMBER = 9;
    private boolean hasFirstBaiDaCard;
    private int firstBaiDaCard_ = 0;
    public boolean hasFirstBaiDaCard() { return hasFirstBaiDaCard; }
    public int getFirstBaiDaCard() { return firstBaiDaCard_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData element : getFightStartRoleDataList()) {
        output.writeMessage(1, element);
      }
      if (hasRemainCardCount()) {
        output.writeInt32(2, getRemainCardCount());
      }
      if (hasZhuangSeat()) {
        output.writeInt32(3, getZhuangSeat());
      }
      if (hasBaidaCard()) {
        output.writeInt32(4, getBaidaCard());
      }
      for (int element : getDiceList()) {
        output.writeInt32(5, element);
      }
      if (hasRemainHuangFan()) {
        output.writeInt32(6, getRemainHuangFan());
      }
      if (hasCurrentRoundNum()) {
        output.writeInt32(7, getCurrentRoundNum());
      }
      if (hasMaxRound()) {
        output.writeInt32(8, getMaxRound());
      }
      if (hasFirstBaiDaCard()) {
        output.writeInt32(9, getFirstBaiDaCard());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData element : getFightStartRoleDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      if (hasRemainCardCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getRemainCardCount());
      }
      if (hasZhuangSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getZhuangSeat());
      }
      if (hasBaidaCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getBaidaCard());
      }
      {
        int dataSize = 0;
        for (int element : getDiceList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getDiceList().size();
      }
      if (hasRemainHuangFan()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getRemainHuangFan());
      }
      if (hasCurrentRoundNum()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getCurrentRoundNum());
      }
      if (hasMaxRound()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getMaxRound());
      }
      if (hasFirstBaiDaCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getFirstBaiDaCard());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightStart parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightStart prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightStart result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightStart();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightStart internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightStart();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightStart getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightStart build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightStart buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightStart buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.fightStartRoleData_ != java.util.Collections.EMPTY_LIST) {
          result.fightStartRoleData_ =
            java.util.Collections.unmodifiableList(result.fightStartRoleData_);
        }
        if (result.dice_ != java.util.Collections.EMPTY_LIST) {
          result.dice_ =
            java.util.Collections.unmodifiableList(result.dice_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightStart returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightStart) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightStart)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightStart other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.getDefaultInstance()) return this;
        if (!other.fightStartRoleData_.isEmpty()) {
          if (result.fightStartRoleData_.isEmpty()) {
            result.fightStartRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData>();
          }
          result.fightStartRoleData_.addAll(other.fightStartRoleData_);
        }
        if (other.hasRemainCardCount()) {
          setRemainCardCount(other.getRemainCardCount());
        }
        if (other.hasZhuangSeat()) {
          setZhuangSeat(other.getZhuangSeat());
        }
        if (other.hasBaidaCard()) {
          setBaidaCard(other.getBaidaCard());
        }
        if (!other.dice_.isEmpty()) {
          if (result.dice_.isEmpty()) {
            result.dice_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.dice_.addAll(other.dice_);
        }
        if (other.hasRemainHuangFan()) {
          setRemainHuangFan(other.getRemainHuangFan());
        }
        if (other.hasCurrentRoundNum()) {
          setCurrentRoundNum(other.getCurrentRoundNum());
        }
        if (other.hasMaxRound()) {
          setMaxRound(other.getMaxRound());
        }
        if (other.hasFirstBaiDaCard()) {
          setFirstBaiDaCard(other.getFirstBaiDaCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addFightStartRoleData(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setRemainCardCount(input.readInt32());
              break;
            }
            case 24: {
              setZhuangSeat(input.readInt32());
              break;
            }
            case 32: {
              setBaidaCard(input.readInt32());
              break;
            }
            case 40: {
              addDice(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addDice(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              setRemainHuangFan(input.readInt32());
              break;
            }
            case 56: {
              setCurrentRoundNum(input.readInt32());
              break;
            }
            case 64: {
              setMaxRound(input.readInt32());
              break;
            }
            case 72: {
              setFirstBaiDaCard(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.FightStartRoleData fightStartRoleData = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData> getFightStartRoleDataList() {
        return java.util.Collections.unmodifiableList(result.fightStartRoleData_);
      }
      public int getFightStartRoleDataCount() {
        return result.getFightStartRoleDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData getFightStartRoleData(int index) {
        return result.getFightStartRoleData(index);
      }
      public Builder setFightStartRoleData(int index, com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.fightStartRoleData_.set(index, value);
        return this;
      }
      public Builder setFightStartRoleData(int index, com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData.Builder builderForValue) {
        result.fightStartRoleData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addFightStartRoleData(com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.fightStartRoleData_.isEmpty()) {
          result.fightStartRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData>();
        }
        result.fightStartRoleData_.add(value);
        return this;
      }
      public Builder addFightStartRoleData(com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData.Builder builderForValue) {
        if (result.fightStartRoleData_.isEmpty()) {
          result.fightStartRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData>();
        }
        result.fightStartRoleData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllFightStartRoleData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData> values) {
        if (result.fightStartRoleData_.isEmpty()) {
          result.fightStartRoleData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.FightStartRoleData>();
        }
        super.addAll(values, result.fightStartRoleData_);
        return this;
      }
      public Builder clearFightStartRoleData() {
        result.fightStartRoleData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 remainCardCount = 2;
      public boolean hasRemainCardCount() {
        return result.hasRemainCardCount();
      }
      public int getRemainCardCount() {
        return result.getRemainCardCount();
      }
      public Builder setRemainCardCount(int value) {
        result.hasRemainCardCount = true;
        result.remainCardCount_ = value;
        return this;
      }
      public Builder clearRemainCardCount() {
        result.hasRemainCardCount = false;
        result.remainCardCount_ = 0;
        return this;
      }
      
      // optional int32 zhuangSeat = 3;
      public boolean hasZhuangSeat() {
        return result.hasZhuangSeat();
      }
      public int getZhuangSeat() {
        return result.getZhuangSeat();
      }
      public Builder setZhuangSeat(int value) {
        result.hasZhuangSeat = true;
        result.zhuangSeat_ = value;
        return this;
      }
      public Builder clearZhuangSeat() {
        result.hasZhuangSeat = false;
        result.zhuangSeat_ = 0;
        return this;
      }
      
      // optional int32 baidaCard = 4;
      public boolean hasBaidaCard() {
        return result.hasBaidaCard();
      }
      public int getBaidaCard() {
        return result.getBaidaCard();
      }
      public Builder setBaidaCard(int value) {
        result.hasBaidaCard = true;
        result.baidaCard_ = value;
        return this;
      }
      public Builder clearBaidaCard() {
        result.hasBaidaCard = false;
        result.baidaCard_ = 0;
        return this;
      }
      
      // repeated int32 dice = 5;
      public java.util.List<java.lang.Integer> getDiceList() {
        return java.util.Collections.unmodifiableList(result.dice_);
      }
      public int getDiceCount() {
        return result.getDiceCount();
      }
      public int getDice(int index) {
        return result.getDice(index);
      }
      public Builder setDice(int index, int value) {
        result.dice_.set(index, value);
        return this;
      }
      public Builder addDice(int value) {
        if (result.dice_.isEmpty()) {
          result.dice_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.dice_.add(value);
        return this;
      }
      public Builder addAllDice(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.dice_.isEmpty()) {
          result.dice_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.dice_);
        return this;
      }
      public Builder clearDice() {
        result.dice_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 remainHuangFan = 6;
      public boolean hasRemainHuangFan() {
        return result.hasRemainHuangFan();
      }
      public int getRemainHuangFan() {
        return result.getRemainHuangFan();
      }
      public Builder setRemainHuangFan(int value) {
        result.hasRemainHuangFan = true;
        result.remainHuangFan_ = value;
        return this;
      }
      public Builder clearRemainHuangFan() {
        result.hasRemainHuangFan = false;
        result.remainHuangFan_ = 0;
        return this;
      }
      
      // optional int32 currentRoundNum = 7;
      public boolean hasCurrentRoundNum() {
        return result.hasCurrentRoundNum();
      }
      public int getCurrentRoundNum() {
        return result.getCurrentRoundNum();
      }
      public Builder setCurrentRoundNum(int value) {
        result.hasCurrentRoundNum = true;
        result.currentRoundNum_ = value;
        return this;
      }
      public Builder clearCurrentRoundNum() {
        result.hasCurrentRoundNum = false;
        result.currentRoundNum_ = 0;
        return this;
      }
      
      // optional int32 maxRound = 8;
      public boolean hasMaxRound() {
        return result.hasMaxRound();
      }
      public int getMaxRound() {
        return result.getMaxRound();
      }
      public Builder setMaxRound(int value) {
        result.hasMaxRound = true;
        result.maxRound_ = value;
        return this;
      }
      public Builder clearMaxRound() {
        result.hasMaxRound = false;
        result.maxRound_ = 0;
        return this;
      }
      
      // optional int32 firstBaiDaCard = 9;
      public boolean hasFirstBaiDaCard() {
        return result.hasFirstBaiDaCard();
      }
      public int getFirstBaiDaCard() {
        return result.getFirstBaiDaCard();
      }
      public Builder setFirstBaiDaCard(int value) {
        result.hasFirstBaiDaCard = true;
        result.firstBaiDaCard_ = value;
        return this;
      }
      public Builder clearFirstBaiDaCard() {
        result.hasFirstBaiDaCard = false;
        result.firstBaiDaCard_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightStart)
    }
    
    static {
      defaultInstance = new SCFightStart(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightStart)
  }
  
  public static final class SCFightRoundOver extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightRoundOver.newBuilder() to construct.
    private SCFightRoundOver() {
      initFields();
    }
    private SCFightRoundOver(boolean noInit) {}
    
    private static final SCFightRoundOver defaultInstance;
    public static SCFightRoundOver getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightRoundOver getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_fieldAccessorTable;
    }
    
    // repeated int32 zhamaCards = 1;
    public static final int ZHAMACARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> zhamaCards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getZhamaCardsList() {
      return zhamaCards_;
    }
    public int getZhamaCardsCount() { return zhamaCards_.size(); }
    public int getZhamaCards(int index) {
      return zhamaCards_.get(index);
    }
    
    // repeated int32 flyCards = 2;
    public static final int FLYCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> flyCards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFlyCardsList() {
      return flyCards_;
    }
    public int getFlyCardsCount() { return flyCards_.size(); }
    public int getFlyCards(int index) {
      return flyCards_.get(index);
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.RoleRoundOverInfoData roleRoundOverInfoData = 3;
    public static final int ROLEROUNDOVERINFODATA_FIELD_NUMBER = 3;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData> roleRoundOverInfoData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData> getRoleRoundOverInfoDataList() {
      return roleRoundOverInfoData_;
    }
    public int getRoleRoundOverInfoDataCount() { return roleRoundOverInfoData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData getRoleRoundOverInfoData(int index) {
      return roleRoundOverInfoData_.get(index);
    }
    
    // optional string roomId = 4;
    public static final int ROOMID_FIELD_NUMBER = 4;
    private boolean hasRoomId;
    private java.lang.String roomId_ = "";
    public boolean hasRoomId() { return hasRoomId; }
    public java.lang.String getRoomId() { return roomId_; }
    
    // optional int32 finishRoundCount = 5;
    public static final int FINISHROUNDCOUNT_FIELD_NUMBER = 5;
    private boolean hasFinishRoundCount;
    private int finishRoundCount_ = 0;
    public boolean hasFinishRoundCount() { return hasFinishRoundCount; }
    public int getFinishRoundCount() { return finishRoundCount_; }
    
    // optional int32 maxRoundCount = 6;
    public static final int MAXROUNDCOUNT_FIELD_NUMBER = 6;
    private boolean hasMaxRoundCount;
    private int maxRoundCount_ = 0;
    public boolean hasMaxRoundCount() { return hasMaxRoundCount; }
    public int getMaxRoundCount() { return maxRoundCount_; }
    
    // optional int32 flyScore = 7;
    public static final int FLYSCORE_FIELD_NUMBER = 7;
    private boolean hasFlyScore;
    private int flyScore_ = 0;
    public boolean hasFlyScore() { return hasFlyScore; }
    public int getFlyScore() { return flyScore_; }
    
    // optional bool huangFan = 8;
    public static final int HUANGFAN_FIELD_NUMBER = 8;
    private boolean hasHuangFan;
    private boolean huangFan_ = false;
    public boolean hasHuangFan() { return hasHuangFan; }
    public boolean getHuangFan() { return huangFan_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int element : getZhamaCardsList()) {
        output.writeInt32(1, element);
      }
      for (int element : getFlyCardsList()) {
        output.writeInt32(2, element);
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData element : getRoleRoundOverInfoDataList()) {
        output.writeMessage(3, element);
      }
      if (hasRoomId()) {
        output.writeString(4, getRoomId());
      }
      if (hasFinishRoundCount()) {
        output.writeInt32(5, getFinishRoundCount());
      }
      if (hasMaxRoundCount()) {
        output.writeInt32(6, getMaxRoundCount());
      }
      if (hasFlyScore()) {
        output.writeInt32(7, getFlyScore());
      }
      if (hasHuangFan()) {
        output.writeBool(8, getHuangFan());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (int element : getZhamaCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getZhamaCardsList().size();
      }
      {
        int dataSize = 0;
        for (int element : getFlyCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFlyCardsList().size();
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData element : getRoleRoundOverInfoDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      if (hasRoomId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getRoomId());
      }
      if (hasFinishRoundCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getFinishRoundCount());
      }
      if (hasMaxRoundCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getMaxRoundCount());
      }
      if (hasFlyScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getFlyScore());
      }
      if (hasHuangFan()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, getHuangFan());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.zhamaCards_ != java.util.Collections.EMPTY_LIST) {
          result.zhamaCards_ =
            java.util.Collections.unmodifiableList(result.zhamaCards_);
        }
        if (result.flyCards_ != java.util.Collections.EMPTY_LIST) {
          result.flyCards_ =
            java.util.Collections.unmodifiableList(result.flyCards_);
        }
        if (result.roleRoundOverInfoData_ != java.util.Collections.EMPTY_LIST) {
          result.roleRoundOverInfoData_ =
            java.util.Collections.unmodifiableList(result.roleRoundOverInfoData_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.getDefaultInstance()) return this;
        if (!other.zhamaCards_.isEmpty()) {
          if (result.zhamaCards_.isEmpty()) {
            result.zhamaCards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.zhamaCards_.addAll(other.zhamaCards_);
        }
        if (!other.flyCards_.isEmpty()) {
          if (result.flyCards_.isEmpty()) {
            result.flyCards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.flyCards_.addAll(other.flyCards_);
        }
        if (!other.roleRoundOverInfoData_.isEmpty()) {
          if (result.roleRoundOverInfoData_.isEmpty()) {
            result.roleRoundOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData>();
          }
          result.roleRoundOverInfoData_.addAll(other.roleRoundOverInfoData_);
        }
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasFinishRoundCount()) {
          setFinishRoundCount(other.getFinishRoundCount());
        }
        if (other.hasMaxRoundCount()) {
          setMaxRoundCount(other.getMaxRoundCount());
        }
        if (other.hasFlyScore()) {
          setFlyScore(other.getFlyScore());
        }
        if (other.hasHuangFan()) {
          setHuangFan(other.getHuangFan());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              addZhamaCards(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addZhamaCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              addFlyCards(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFlyCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRoleRoundOverInfoData(subBuilder.buildPartial());
              break;
            }
            case 34: {
              setRoomId(input.readString());
              break;
            }
            case 40: {
              setFinishRoundCount(input.readInt32());
              break;
            }
            case 48: {
              setMaxRoundCount(input.readInt32());
              break;
            }
            case 56: {
              setFlyScore(input.readInt32());
              break;
            }
            case 64: {
              setHuangFan(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // repeated int32 zhamaCards = 1;
      public java.util.List<java.lang.Integer> getZhamaCardsList() {
        return java.util.Collections.unmodifiableList(result.zhamaCards_);
      }
      public int getZhamaCardsCount() {
        return result.getZhamaCardsCount();
      }
      public int getZhamaCards(int index) {
        return result.getZhamaCards(index);
      }
      public Builder setZhamaCards(int index, int value) {
        result.zhamaCards_.set(index, value);
        return this;
      }
      public Builder addZhamaCards(int value) {
        if (result.zhamaCards_.isEmpty()) {
          result.zhamaCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.zhamaCards_.add(value);
        return this;
      }
      public Builder addAllZhamaCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.zhamaCards_.isEmpty()) {
          result.zhamaCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.zhamaCards_);
        return this;
      }
      public Builder clearZhamaCards() {
        result.zhamaCards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 flyCards = 2;
      public java.util.List<java.lang.Integer> getFlyCardsList() {
        return java.util.Collections.unmodifiableList(result.flyCards_);
      }
      public int getFlyCardsCount() {
        return result.getFlyCardsCount();
      }
      public int getFlyCards(int index) {
        return result.getFlyCards(index);
      }
      public Builder setFlyCards(int index, int value) {
        result.flyCards_.set(index, value);
        return this;
      }
      public Builder addFlyCards(int value) {
        if (result.flyCards_.isEmpty()) {
          result.flyCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.flyCards_.add(value);
        return this;
      }
      public Builder addAllFlyCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.flyCards_.isEmpty()) {
          result.flyCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.flyCards_);
        return this;
      }
      public Builder clearFlyCards() {
        result.flyCards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.RoleRoundOverInfoData roleRoundOverInfoData = 3;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData> getRoleRoundOverInfoDataList() {
        return java.util.Collections.unmodifiableList(result.roleRoundOverInfoData_);
      }
      public int getRoleRoundOverInfoDataCount() {
        return result.getRoleRoundOverInfoDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData getRoleRoundOverInfoData(int index) {
        return result.getRoleRoundOverInfoData(index);
      }
      public Builder setRoleRoundOverInfoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.roleRoundOverInfoData_.set(index, value);
        return this;
      }
      public Builder setRoleRoundOverInfoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.Builder builderForValue) {
        result.roleRoundOverInfoData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRoleRoundOverInfoData(com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.roleRoundOverInfoData_.isEmpty()) {
          result.roleRoundOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData>();
        }
        result.roleRoundOverInfoData_.add(value);
        return this;
      }
      public Builder addRoleRoundOverInfoData(com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData.Builder builderForValue) {
        if (result.roleRoundOverInfoData_.isEmpty()) {
          result.roleRoundOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData>();
        }
        result.roleRoundOverInfoData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRoleRoundOverInfoData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData> values) {
        if (result.roleRoundOverInfoData_.isEmpty()) {
          result.roleRoundOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleRoundOverInfoData>();
        }
        super.addAll(values, result.roleRoundOverInfoData_);
        return this;
      }
      public Builder clearRoleRoundOverInfoData() {
        result.roleRoundOverInfoData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string roomId = 4;
      public boolean hasRoomId() {
        return result.hasRoomId();
      }
      public java.lang.String getRoomId() {
        return result.getRoomId();
      }
      public Builder setRoomId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder clearRoomId() {
        result.hasRoomId = false;
        result.roomId_ = getDefaultInstance().getRoomId();
        return this;
      }
      
      // optional int32 finishRoundCount = 5;
      public boolean hasFinishRoundCount() {
        return result.hasFinishRoundCount();
      }
      public int getFinishRoundCount() {
        return result.getFinishRoundCount();
      }
      public Builder setFinishRoundCount(int value) {
        result.hasFinishRoundCount = true;
        result.finishRoundCount_ = value;
        return this;
      }
      public Builder clearFinishRoundCount() {
        result.hasFinishRoundCount = false;
        result.finishRoundCount_ = 0;
        return this;
      }
      
      // optional int32 maxRoundCount = 6;
      public boolean hasMaxRoundCount() {
        return result.hasMaxRoundCount();
      }
      public int getMaxRoundCount() {
        return result.getMaxRoundCount();
      }
      public Builder setMaxRoundCount(int value) {
        result.hasMaxRoundCount = true;
        result.maxRoundCount_ = value;
        return this;
      }
      public Builder clearMaxRoundCount() {
        result.hasMaxRoundCount = false;
        result.maxRoundCount_ = 0;
        return this;
      }
      
      // optional int32 flyScore = 7;
      public boolean hasFlyScore() {
        return result.hasFlyScore();
      }
      public int getFlyScore() {
        return result.getFlyScore();
      }
      public Builder setFlyScore(int value) {
        result.hasFlyScore = true;
        result.flyScore_ = value;
        return this;
      }
      public Builder clearFlyScore() {
        result.hasFlyScore = false;
        result.flyScore_ = 0;
        return this;
      }
      
      // optional bool huangFan = 8;
      public boolean hasHuangFan() {
        return result.hasHuangFan();
      }
      public boolean getHuangFan() {
        return result.getHuangFan();
      }
      public Builder setHuangFan(boolean value) {
        result.hasHuangFan = true;
        result.huangFan_ = value;
        return this;
      }
      public Builder clearHuangFan() {
        result.hasHuangFan = false;
        result.huangFan_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightRoundOver)
    }
    
    static {
      defaultInstance = new SCFightRoundOver(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightRoundOver)
  }
  
  public static final class SCFightGameOver extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightGameOver.newBuilder() to construct.
    private SCFightGameOver() {
      initFields();
    }
    private SCFightGameOver(boolean noInit) {}
    
    private static final SCFightGameOver defaultInstance;
    public static SCFightGameOver getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightGameOver getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.RoleGameOverInfoData roleGameOverInfoData = 1;
    public static final int ROLEGAMEOVERINFODATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData> roleGameOverInfoData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData> getRoleGameOverInfoDataList() {
      return roleGameOverInfoData_;
    }
    public int getRoleGameOverInfoDataCount() { return roleGameOverInfoData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData getRoleGameOverInfoData(int index) {
      return roleGameOverInfoData_.get(index);
    }
    
    // optional string roomId = 2;
    public static final int ROOMID_FIELD_NUMBER = 2;
    private boolean hasRoomId;
    private java.lang.String roomId_ = "";
    public boolean hasRoomId() { return hasRoomId; }
    public java.lang.String getRoomId() { return roomId_; }
    
    // optional int32 finishRoundCount = 3;
    public static final int FINISHROUNDCOUNT_FIELD_NUMBER = 3;
    private boolean hasFinishRoundCount;
    private int finishRoundCount_ = 0;
    public boolean hasFinishRoundCount() { return hasFinishRoundCount; }
    public int getFinishRoundCount() { return finishRoundCount_; }
    
    // optional int32 maxRoundCount = 4;
    public static final int MAXROUNDCOUNT_FIELD_NUMBER = 4;
    private boolean hasMaxRoundCount;
    private int maxRoundCount_ = 0;
    public boolean hasMaxRoundCount() { return hasMaxRoundCount; }
    public int getMaxRoundCount() { return maxRoundCount_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData element : getRoleGameOverInfoDataList()) {
        output.writeMessage(1, element);
      }
      if (hasRoomId()) {
        output.writeString(2, getRoomId());
      }
      if (hasFinishRoundCount()) {
        output.writeInt32(3, getFinishRoundCount());
      }
      if (hasMaxRoundCount()) {
        output.writeInt32(4, getMaxRoundCount());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData element : getRoleGameOverInfoDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      if (hasRoomId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getRoomId());
      }
      if (hasFinishRoundCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getFinishRoundCount());
      }
      if (hasMaxRoundCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getMaxRoundCount());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.roleGameOverInfoData_ != java.util.Collections.EMPTY_LIST) {
          result.roleGameOverInfoData_ =
            java.util.Collections.unmodifiableList(result.roleGameOverInfoData_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.getDefaultInstance()) return this;
        if (!other.roleGameOverInfoData_.isEmpty()) {
          if (result.roleGameOverInfoData_.isEmpty()) {
            result.roleGameOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData>();
          }
          result.roleGameOverInfoData_.addAll(other.roleGameOverInfoData_);
        }
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasFinishRoundCount()) {
          setFinishRoundCount(other.getFinishRoundCount());
        }
        if (other.hasMaxRoundCount()) {
          setMaxRoundCount(other.getMaxRoundCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRoleGameOverInfoData(subBuilder.buildPartial());
              break;
            }
            case 18: {
              setRoomId(input.readString());
              break;
            }
            case 24: {
              setFinishRoundCount(input.readInt32());
              break;
            }
            case 32: {
              setMaxRoundCount(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.RoleGameOverInfoData roleGameOverInfoData = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData> getRoleGameOverInfoDataList() {
        return java.util.Collections.unmodifiableList(result.roleGameOverInfoData_);
      }
      public int getRoleGameOverInfoDataCount() {
        return result.getRoleGameOverInfoDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData getRoleGameOverInfoData(int index) {
        return result.getRoleGameOverInfoData(index);
      }
      public Builder setRoleGameOverInfoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.roleGameOverInfoData_.set(index, value);
        return this;
      }
      public Builder setRoleGameOverInfoData(int index, com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.Builder builderForValue) {
        result.roleGameOverInfoData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRoleGameOverInfoData(com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.roleGameOverInfoData_.isEmpty()) {
          result.roleGameOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData>();
        }
        result.roleGameOverInfoData_.add(value);
        return this;
      }
      public Builder addRoleGameOverInfoData(com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData.Builder builderForValue) {
        if (result.roleGameOverInfoData_.isEmpty()) {
          result.roleGameOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData>();
        }
        result.roleGameOverInfoData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRoleGameOverInfoData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData> values) {
        if (result.roleGameOverInfoData_.isEmpty()) {
          result.roleGameOverInfoData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.RoleGameOverInfoData>();
        }
        super.addAll(values, result.roleGameOverInfoData_);
        return this;
      }
      public Builder clearRoleGameOverInfoData() {
        result.roleGameOverInfoData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string roomId = 2;
      public boolean hasRoomId() {
        return result.hasRoomId();
      }
      public java.lang.String getRoomId() {
        return result.getRoomId();
      }
      public Builder setRoomId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder clearRoomId() {
        result.hasRoomId = false;
        result.roomId_ = getDefaultInstance().getRoomId();
        return this;
      }
      
      // optional int32 finishRoundCount = 3;
      public boolean hasFinishRoundCount() {
        return result.hasFinishRoundCount();
      }
      public int getFinishRoundCount() {
        return result.getFinishRoundCount();
      }
      public Builder setFinishRoundCount(int value) {
        result.hasFinishRoundCount = true;
        result.finishRoundCount_ = value;
        return this;
      }
      public Builder clearFinishRoundCount() {
        result.hasFinishRoundCount = false;
        result.finishRoundCount_ = 0;
        return this;
      }
      
      // optional int32 maxRoundCount = 4;
      public boolean hasMaxRoundCount() {
        return result.hasMaxRoundCount();
      }
      public int getMaxRoundCount() {
        return result.getMaxRoundCount();
      }
      public Builder setMaxRoundCount(int value) {
        result.hasMaxRoundCount = true;
        result.maxRoundCount_ = value;
        return this;
      }
      public Builder clearMaxRoundCount() {
        result.hasMaxRoundCount = false;
        result.maxRoundCount_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightGameOver)
    }
    
    static {
      defaultInstance = new SCFightGameOver(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightGameOver)
  }
  
  public static final class SCFightNoticeSendCard extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightNoticeSendCard.newBuilder() to construct.
    private SCFightNoticeSendCard() {
      initFields();
    }
    private SCFightNoticeSendCard(boolean noInit) {}
    
    private static final SCFightNoticeSendCard defaultInstance;
    public static SCFightNoticeSendCard getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightNoticeSendCard getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeSendCard)
    }
    
    static {
      defaultInstance = new SCFightNoticeSendCard(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeSendCard)
  }
  
  public static final class FightSendCardRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightSendCardRequest.newBuilder() to construct.
    private FightSendCardRequest() {
      initFields();
    }
    private FightSendCardRequest(boolean noInit) {}
    
    private static final FightSendCardRequest defaultInstance;
    public static FightSendCardRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightSendCardRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_fieldAccessorTable;
    }
    
    // optional int32 card = 1;
    public static final int CARD_FIELD_NUMBER = 1;
    private boolean hasCard;
    private int card_ = 0;
    public boolean hasCard() { return hasCard; }
    public int getCard() { return card_; }
    
    // optional bool isTouchCard = 2 [default = false];
    public static final int ISTOUCHCARD_FIELD_NUMBER = 2;
    private boolean hasIsTouchCard;
    private boolean isTouchCard_ = false;
    public boolean hasIsTouchCard() { return hasIsTouchCard; }
    public boolean getIsTouchCard() { return isTouchCard_; }
    
    // repeated int32 tingCards = 3;
    public static final int TINGCARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> tingCards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getTingCardsList() {
      return tingCards_;
    }
    public int getTingCardsCount() { return tingCards_.size(); }
    public int getTingCards(int index) {
      return tingCards_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCard()) {
        output.writeInt32(1, getCard());
      }
      if (hasIsTouchCard()) {
        output.writeBool(2, getIsTouchCard());
      }
      for (int element : getTingCardsList()) {
        output.writeInt32(3, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCard());
      }
      if (hasIsTouchCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getIsTouchCard());
      }
      {
        int dataSize = 0;
        for (int element : getTingCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getTingCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.tingCards_ != java.util.Collections.EMPTY_LIST) {
          result.tingCards_ =
            java.util.Collections.unmodifiableList(result.tingCards_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.getDefaultInstance()) return this;
        if (other.hasCard()) {
          setCard(other.getCard());
        }
        if (other.hasIsTouchCard()) {
          setIsTouchCard(other.getIsTouchCard());
        }
        if (!other.tingCards_.isEmpty()) {
          if (result.tingCards_.isEmpty()) {
            result.tingCards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.tingCards_.addAll(other.tingCards_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCard(input.readInt32());
              break;
            }
            case 16: {
              setIsTouchCard(input.readBool());
              break;
            }
            case 24: {
              addTingCards(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addTingCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // optional int32 card = 1;
      public boolean hasCard() {
        return result.hasCard();
      }
      public int getCard() {
        return result.getCard();
      }
      public Builder setCard(int value) {
        result.hasCard = true;
        result.card_ = value;
        return this;
      }
      public Builder clearCard() {
        result.hasCard = false;
        result.card_ = 0;
        return this;
      }
      
      // optional bool isTouchCard = 2 [default = false];
      public boolean hasIsTouchCard() {
        return result.hasIsTouchCard();
      }
      public boolean getIsTouchCard() {
        return result.getIsTouchCard();
      }
      public Builder setIsTouchCard(boolean value) {
        result.hasIsTouchCard = true;
        result.isTouchCard_ = value;
        return this;
      }
      public Builder clearIsTouchCard() {
        result.hasIsTouchCard = false;
        result.isTouchCard_ = false;
        return this;
      }
      
      // repeated int32 tingCards = 3;
      public java.util.List<java.lang.Integer> getTingCardsList() {
        return java.util.Collections.unmodifiableList(result.tingCards_);
      }
      public int getTingCardsCount() {
        return result.getTingCardsCount();
      }
      public int getTingCards(int index) {
        return result.getTingCards(index);
      }
      public Builder setTingCards(int index, int value) {
        result.tingCards_.set(index, value);
        return this;
      }
      public Builder addTingCards(int value) {
        if (result.tingCards_.isEmpty()) {
          result.tingCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.tingCards_.add(value);
        return this;
      }
      public Builder addAllTingCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.tingCards_.isEmpty()) {
          result.tingCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.tingCards_);
        return this;
      }
      public Builder clearTingCards() {
        result.tingCards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightSendCardRequest)
    }
    
    static {
      defaultInstance = new FightSendCardRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightSendCardRequest)
  }
  
  public static final class FightSendCardResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightSendCardResponse.newBuilder() to construct.
    private FightSendCardResponse() {
      initFields();
    }
    private FightSendCardResponse(boolean noInit) {}
    
    private static final FightSendCardResponse defaultInstance;
    public static FightSendCardResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightSendCardResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightSendCardResponse)
    }
    
    static {
      defaultInstance = new FightSendCardResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightSendCardResponse)
  }
  
  public static final class SCFightSendCard extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightSendCard.newBuilder() to construct.
    private SCFightSendCard() {
      initFields();
    }
    private SCFightSendCard(boolean noInit) {}
    
    private static final SCFightSendCard defaultInstance;
    public static SCFightSendCard getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightSendCard getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_fieldAccessorTable;
    }
    
    // optional int32 card = 1;
    public static final int CARD_FIELD_NUMBER = 1;
    private boolean hasCard;
    private int card_ = 0;
    public boolean hasCard() { return hasCard; }
    public int getCard() { return card_; }
    
    // optional int32 seat = 2;
    public static final int SEAT_FIELD_NUMBER = 2;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional bool isTouchCard = 3;
    public static final int ISTOUCHCARD_FIELD_NUMBER = 3;
    private boolean hasIsTouchCard;
    private boolean isTouchCard_ = false;
    public boolean hasIsTouchCard() { return hasIsTouchCard; }
    public boolean getIsTouchCard() { return isTouchCard_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCard()) {
        output.writeInt32(1, getCard());
      }
      if (hasSeat()) {
        output.writeInt32(2, getSeat());
      }
      if (hasIsTouchCard()) {
        output.writeBool(3, getIsTouchCard());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCard());
      }
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getSeat());
      }
      if (hasIsTouchCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getIsTouchCard());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.getDefaultInstance()) return this;
        if (other.hasCard()) {
          setCard(other.getCard());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasIsTouchCard()) {
          setIsTouchCard(other.getIsTouchCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCard(input.readInt32());
              break;
            }
            case 16: {
              setSeat(input.readInt32());
              break;
            }
            case 24: {
              setIsTouchCard(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional int32 card = 1;
      public boolean hasCard() {
        return result.hasCard();
      }
      public int getCard() {
        return result.getCard();
      }
      public Builder setCard(int value) {
        result.hasCard = true;
        result.card_ = value;
        return this;
      }
      public Builder clearCard() {
        result.hasCard = false;
        result.card_ = 0;
        return this;
      }
      
      // optional int32 seat = 2;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional bool isTouchCard = 3;
      public boolean hasIsTouchCard() {
        return result.hasIsTouchCard();
      }
      public boolean getIsTouchCard() {
        return result.getIsTouchCard();
      }
      public Builder setIsTouchCard(boolean value) {
        result.hasIsTouchCard = true;
        result.isTouchCard_ = value;
        return this;
      }
      public Builder clearIsTouchCard() {
        result.hasIsTouchCard = false;
        result.isTouchCard_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightSendCard)
    }
    
    static {
      defaultInstance = new SCFightSendCard(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightSendCard)
  }
  
  public static final class SCFightTouchCard extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightTouchCard.newBuilder() to construct.
    private SCFightTouchCard() {
      initFields();
    }
    private SCFightTouchCard(boolean noInit) {}
    
    private static final SCFightTouchCard defaultInstance;
    public static SCFightTouchCard getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightTouchCard getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional int32 touchCard = 2;
    public static final int TOUCHCARD_FIELD_NUMBER = 2;
    private boolean hasTouchCard;
    private int touchCard_ = 0;
    public boolean hasTouchCard() { return hasTouchCard; }
    public int getTouchCard() { return touchCard_; }
    
    // optional int32 remainCardCount = 3;
    public static final int REMAINCARDCOUNT_FIELD_NUMBER = 3;
    private boolean hasRemainCardCount;
    private int remainCardCount_ = 0;
    public boolean hasRemainCardCount() { return hasRemainCardCount; }
    public int getRemainCardCount() { return remainCardCount_; }
    
    // optional bool isFlower = 4 [default = false];
    public static final int ISFLOWER_FIELD_NUMBER = 4;
    private boolean hasIsFlower;
    private boolean isFlower_ = false;
    public boolean hasIsFlower() { return hasIsFlower; }
    public boolean getIsFlower() { return isFlower_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasTouchCard()) {
        output.writeInt32(2, getTouchCard());
      }
      if (hasRemainCardCount()) {
        output.writeInt32(3, getRemainCardCount());
      }
      if (hasIsFlower()) {
        output.writeBool(4, getIsFlower());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasTouchCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getTouchCard());
      }
      if (hasRemainCardCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getRemainCardCount());
      }
      if (hasIsFlower()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getIsFlower());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasTouchCard()) {
          setTouchCard(other.getTouchCard());
        }
        if (other.hasRemainCardCount()) {
          setRemainCardCount(other.getRemainCardCount());
        }
        if (other.hasIsFlower()) {
          setIsFlower(other.getIsFlower());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 16: {
              setTouchCard(input.readInt32());
              break;
            }
            case 24: {
              setRemainCardCount(input.readInt32());
              break;
            }
            case 32: {
              setIsFlower(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional int32 touchCard = 2;
      public boolean hasTouchCard() {
        return result.hasTouchCard();
      }
      public int getTouchCard() {
        return result.getTouchCard();
      }
      public Builder setTouchCard(int value) {
        result.hasTouchCard = true;
        result.touchCard_ = value;
        return this;
      }
      public Builder clearTouchCard() {
        result.hasTouchCard = false;
        result.touchCard_ = 0;
        return this;
      }
      
      // optional int32 remainCardCount = 3;
      public boolean hasRemainCardCount() {
        return result.hasRemainCardCount();
      }
      public int getRemainCardCount() {
        return result.getRemainCardCount();
      }
      public Builder setRemainCardCount(int value) {
        result.hasRemainCardCount = true;
        result.remainCardCount_ = value;
        return this;
      }
      public Builder clearRemainCardCount() {
        result.hasRemainCardCount = false;
        result.remainCardCount_ = 0;
        return this;
      }
      
      // optional bool isFlower = 4 [default = false];
      public boolean hasIsFlower() {
        return result.hasIsFlower();
      }
      public boolean getIsFlower() {
        return result.getIsFlower();
      }
      public Builder setIsFlower(boolean value) {
        result.hasIsFlower = true;
        result.isFlower_ = value;
        return this;
      }
      public Builder clearIsFlower() {
        result.hasIsFlower = false;
        result.isFlower_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightTouchCard)
    }
    
    static {
      defaultInstance = new SCFightTouchCard(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightTouchCard)
  }
  
  public static final class SCFightNoticeChooseCardList extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightNoticeChooseCardList.newBuilder() to construct.
    private SCFightNoticeChooseCardList() {
      initFields();
    }
    private SCFightNoticeChooseCardList(boolean noInit) {}
    
    private static final SCFightNoticeChooseCardList defaultInstance;
    public static SCFightNoticeChooseCardList getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightNoticeChooseCardList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.CallHuData callHuData = 1;
    public static final int CALLHUDATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallHuData> callHuData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallHuData> getCallHuDataList() {
      return callHuData_;
    }
    public int getCallHuDataCount() { return callHuData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.CallHuData getCallHuData(int index) {
      return callHuData_.get(index);
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.CallCardListData callCardListData = 2;
    public static final int CALLCARDLISTDATA_FIELD_NUMBER = 2;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData> callCardListData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData> getCallCardListDataList() {
      return callCardListData_;
    }
    public int getCallCardListDataCount() { return callCardListData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.CallCardListData getCallCardListData(int index) {
      return callCardListData_.get(index);
    }
    
    // optional int32 seat = 3;
    public static final int SEAT_FIELD_NUMBER = 3;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional int32 tempGameCount = 4;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 4;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.CallHuData element : getCallHuDataList()) {
        output.writeMessage(1, element);
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.CallCardListData element : getCallCardListDataList()) {
        output.writeMessage(2, element);
      }
      if (hasSeat()) {
        output.writeInt32(3, getSeat());
      }
      if (hasTempGameCount()) {
        output.writeInt32(4, getTempGameCount());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.CallHuData element : getCallHuDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      for (com.randioo.mahjong_public_server.protocol.Entity.CallCardListData element : getCallCardListDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getSeat());
      }
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTempGameCount());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.callHuData_ != java.util.Collections.EMPTY_LIST) {
          result.callHuData_ =
            java.util.Collections.unmodifiableList(result.callHuData_);
        }
        if (result.callCardListData_ != java.util.Collections.EMPTY_LIST) {
          result.callCardListData_ =
            java.util.Collections.unmodifiableList(result.callCardListData_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.getDefaultInstance()) return this;
        if (!other.callHuData_.isEmpty()) {
          if (result.callHuData_.isEmpty()) {
            result.callHuData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallHuData>();
          }
          result.callHuData_.addAll(other.callHuData_);
        }
        if (!other.callCardListData_.isEmpty()) {
          if (result.callCardListData_.isEmpty()) {
            result.callCardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData>();
          }
          result.callCardListData_.addAll(other.callCardListData_);
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.CallHuData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.CallHuData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCallHuData(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCallCardListData(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setSeat(input.readInt32());
              break;
            }
            case 32: {
              setTempGameCount(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.CallHuData callHuData = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallHuData> getCallHuDataList() {
        return java.util.Collections.unmodifiableList(result.callHuData_);
      }
      public int getCallHuDataCount() {
        return result.getCallHuDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CallHuData getCallHuData(int index) {
        return result.getCallHuData(index);
      }
      public Builder setCallHuData(int index, com.randioo.mahjong_public_server.protocol.Entity.CallHuData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.callHuData_.set(index, value);
        return this;
      }
      public Builder setCallHuData(int index, com.randioo.mahjong_public_server.protocol.Entity.CallHuData.Builder builderForValue) {
        result.callHuData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCallHuData(com.randioo.mahjong_public_server.protocol.Entity.CallHuData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.callHuData_.isEmpty()) {
          result.callHuData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallHuData>();
        }
        result.callHuData_.add(value);
        return this;
      }
      public Builder addCallHuData(com.randioo.mahjong_public_server.protocol.Entity.CallHuData.Builder builderForValue) {
        if (result.callHuData_.isEmpty()) {
          result.callHuData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallHuData>();
        }
        result.callHuData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCallHuData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.CallHuData> values) {
        if (result.callHuData_.isEmpty()) {
          result.callHuData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallHuData>();
        }
        super.addAll(values, result.callHuData_);
        return this;
      }
      public Builder clearCallHuData() {
        result.callHuData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .com.randioo.mahjong_public_server.protocol.CallCardListData callCardListData = 2;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData> getCallCardListDataList() {
        return java.util.Collections.unmodifiableList(result.callCardListData_);
      }
      public int getCallCardListDataCount() {
        return result.getCallCardListDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CallCardListData getCallCardListData(int index) {
        return result.getCallCardListData(index);
      }
      public Builder setCallCardListData(int index, com.randioo.mahjong_public_server.protocol.Entity.CallCardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.callCardListData_.set(index, value);
        return this;
      }
      public Builder setCallCardListData(int index, com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.Builder builderForValue) {
        result.callCardListData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCallCardListData(com.randioo.mahjong_public_server.protocol.Entity.CallCardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.callCardListData_.isEmpty()) {
          result.callCardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData>();
        }
        result.callCardListData_.add(value);
        return this;
      }
      public Builder addCallCardListData(com.randioo.mahjong_public_server.protocol.Entity.CallCardListData.Builder builderForValue) {
        if (result.callCardListData_.isEmpty()) {
          result.callCardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData>();
        }
        result.callCardListData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCallCardListData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.CallCardListData> values) {
        if (result.callCardListData_.isEmpty()) {
          result.callCardListData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.CallCardListData>();
        }
        super.addAll(values, result.callCardListData_);
        return this;
      }
      public Builder clearCallCardListData() {
        result.callCardListData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 seat = 3;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional int32 tempGameCount = 4;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeChooseCardList)
    }
    
    static {
      defaultInstance = new SCFightNoticeChooseCardList(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightNoticeChooseCardList)
  }
  
  public static final class SCFightCountdown extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightCountdown.newBuilder() to construct.
    private SCFightCountdown() {
      initFields();
    }
    private SCFightCountdown(boolean noInit) {}
    
    private static final SCFightCountdown defaultInstance;
    public static SCFightCountdown getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightCountdown getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_fieldAccessorTable;
    }
    
    // optional int32 countdown = 1;
    public static final int COUNTDOWN_FIELD_NUMBER = 1;
    private boolean hasCountdown;
    private int countdown_ = 0;
    public boolean hasCountdown() { return hasCountdown; }
    public int getCountdown() { return countdown_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCountdown()) {
        output.writeInt32(1, getCountdown());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCountdown()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCountdown());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.getDefaultInstance()) return this;
        if (other.hasCountdown()) {
          setCountdown(other.getCountdown());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCountdown(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 countdown = 1;
      public boolean hasCountdown() {
        return result.hasCountdown();
      }
      public int getCountdown() {
        return result.getCountdown();
      }
      public Builder setCountdown(int value) {
        result.hasCountdown = true;
        result.countdown_ = value;
        return this;
      }
      public Builder clearCountdown() {
        result.hasCountdown = false;
        result.countdown_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightCountdown)
    }
    
    static {
      defaultInstance = new SCFightCountdown(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightCountdown)
  }
  
  public static final class FightPengRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightPengRequest.newBuilder() to construct.
    private FightPengRequest() {
      initFields();
    }
    private FightPengRequest(boolean noInit) {}
    
    private static final FightPengRequest defaultInstance;
    public static FightPengRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightPengRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_fieldAccessorTable;
    }
    
    // optional int32 tempGameCount = 1;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 1;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    // optional int32 callCardListId = 2;
    public static final int CALLCARDLISTID_FIELD_NUMBER = 2;
    private boolean hasCallCardListId;
    private int callCardListId_ = 0;
    public boolean hasCallCardListId() { return hasCallCardListId; }
    public int getCallCardListId() { return callCardListId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTempGameCount()) {
        output.writeInt32(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        output.writeInt32(2, getCallCardListId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCallCardListId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.getDefaultInstance()) return this;
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        if (other.hasCallCardListId()) {
          setCallCardListId(other.getCallCardListId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTempGameCount(input.readInt32());
              break;
            }
            case 16: {
              setCallCardListId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tempGameCount = 1;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // optional int32 callCardListId = 2;
      public boolean hasCallCardListId() {
        return result.hasCallCardListId();
      }
      public int getCallCardListId() {
        return result.getCallCardListId();
      }
      public Builder setCallCardListId(int value) {
        result.hasCallCardListId = true;
        result.callCardListId_ = value;
        return this;
      }
      public Builder clearCallCardListId() {
        result.hasCallCardListId = false;
        result.callCardListId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightPengRequest)
    }
    
    static {
      defaultInstance = new FightPengRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightPengRequest)
  }
  
  public static final class FightPengResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightPengResponse.newBuilder() to construct.
    private FightPengResponse() {
      initFields();
    }
    private FightPengResponse(boolean noInit) {}
    
    private static final FightPengResponse defaultInstance;
    public static FightPengResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightPengResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightPengResponse)
    }
    
    static {
      defaultInstance = new FightPengResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightPengResponse)
  }
  
  public static final class SCFightCardList extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightCardList.newBuilder() to construct.
    private SCFightCardList() {
      initFields();
    }
    private SCFightCardList(boolean noInit) {}
    
    private static final SCFightCardList defaultInstance;
    public static SCFightCardList getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightCardList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 2;
    public static final int CARDLISTDATA_FIELD_NUMBER = 2;
    private boolean hasCardListData;
    private com.randioo.mahjong_public_server.protocol.Entity.CardListData cardListData_;
    public boolean hasCardListData() { return hasCardListData; }
    public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData() { return cardListData_; }
    
    private void initFields() {
      cardListData_ = com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasCardListData()) {
        output.writeMessage(2, getCardListData());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasCardListData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCardListData());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasCardListData()) {
          mergeCardListData(other.getCardListData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder();
              if (hasCardListData()) {
                subBuilder.mergeFrom(getCardListData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCardListData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.CardListData cardListData = 2;
      public boolean hasCardListData() {
        return result.hasCardListData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.CardListData getCardListData() {
        return result.getCardListData();
      }
      public Builder setCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCardListData = true;
        result.cardListData_ = value;
        return this;
      }
      public Builder setCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData.Builder builderForValue) {
        result.hasCardListData = true;
        result.cardListData_ = builderForValue.build();
        return this;
      }
      public Builder mergeCardListData(com.randioo.mahjong_public_server.protocol.Entity.CardListData value) {
        if (result.hasCardListData() &&
            result.cardListData_ != com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance()) {
          result.cardListData_ =
            com.randioo.mahjong_public_server.protocol.Entity.CardListData.newBuilder(result.cardListData_).mergeFrom(value).buildPartial();
        } else {
          result.cardListData_ = value;
        }
        result.hasCardListData = true;
        return this;
      }
      public Builder clearCardListData() {
        result.hasCardListData = false;
        result.cardListData_ = com.randioo.mahjong_public_server.protocol.Entity.CardListData.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightCardList)
    }
    
    static {
      defaultInstance = new SCFightCardList(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightCardList)
  }
  
  public static final class FightGangRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGangRequest.newBuilder() to construct.
    private FightGangRequest() {
      initFields();
    }
    private FightGangRequest(boolean noInit) {}
    
    private static final FightGangRequest defaultInstance;
    public static FightGangRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGangRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_fieldAccessorTable;
    }
    
    // optional int32 tempGameCount = 1;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 1;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    // optional int32 callCardListId = 2;
    public static final int CALLCARDLISTID_FIELD_NUMBER = 2;
    private boolean hasCallCardListId;
    private int callCardListId_ = 0;
    public boolean hasCallCardListId() { return hasCallCardListId; }
    public int getCallCardListId() { return callCardListId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTempGameCount()) {
        output.writeInt32(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        output.writeInt32(2, getCallCardListId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCallCardListId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.getDefaultInstance()) return this;
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        if (other.hasCallCardListId()) {
          setCallCardListId(other.getCallCardListId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTempGameCount(input.readInt32());
              break;
            }
            case 16: {
              setCallCardListId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tempGameCount = 1;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // optional int32 callCardListId = 2;
      public boolean hasCallCardListId() {
        return result.hasCallCardListId();
      }
      public int getCallCardListId() {
        return result.getCallCardListId();
      }
      public Builder setCallCardListId(int value) {
        result.hasCallCardListId = true;
        result.callCardListId_ = value;
        return this;
      }
      public Builder clearCallCardListId() {
        result.hasCallCardListId = false;
        result.callCardListId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGangRequest)
    }
    
    static {
      defaultInstance = new FightGangRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGangRequest)
  }
  
  public static final class FightGangResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGangResponse.newBuilder() to construct.
    private FightGangResponse() {
      initFields();
    }
    private FightGangResponse(boolean noInit) {}
    
    private static final FightGangResponse defaultInstance;
    public static FightGangResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGangResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGangResponse)
    }
    
    static {
      defaultInstance = new FightGangResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGangResponse)
  }
  
  public static final class FightHuRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightHuRequest.newBuilder() to construct.
    private FightHuRequest() {
      initFields();
    }
    private FightHuRequest(boolean noInit) {}
    
    private static final FightHuRequest defaultInstance;
    public static FightHuRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightHuRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_fieldAccessorTable;
    }
    
    // optional int32 tempGameCount = 1;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 1;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    // optional int32 callCardListId = 2;
    public static final int CALLCARDLISTID_FIELD_NUMBER = 2;
    private boolean hasCallCardListId;
    private int callCardListId_ = 0;
    public boolean hasCallCardListId() { return hasCallCardListId; }
    public int getCallCardListId() { return callCardListId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTempGameCount()) {
        output.writeInt32(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        output.writeInt32(2, getCallCardListId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCallCardListId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.getDefaultInstance()) return this;
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        if (other.hasCallCardListId()) {
          setCallCardListId(other.getCallCardListId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTempGameCount(input.readInt32());
              break;
            }
            case 16: {
              setCallCardListId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tempGameCount = 1;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // optional int32 callCardListId = 2;
      public boolean hasCallCardListId() {
        return result.hasCallCardListId();
      }
      public int getCallCardListId() {
        return result.getCallCardListId();
      }
      public Builder setCallCardListId(int value) {
        result.hasCallCardListId = true;
        result.callCardListId_ = value;
        return this;
      }
      public Builder clearCallCardListId() {
        result.hasCallCardListId = false;
        result.callCardListId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightHuRequest)
    }
    
    static {
      defaultInstance = new FightHuRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightHuRequest)
  }
  
  public static final class FightHuResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightHuResponse.newBuilder() to construct.
    private FightHuResponse() {
      initFields();
    }
    private FightHuResponse(boolean noInit) {}
    
    private static final FightHuResponse defaultInstance;
    public static FightHuResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightHuResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightHuResponse)
    }
    
    static {
      defaultInstance = new FightHuResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightHuResponse)
  }
  
  public static final class SCFightHu extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightHu.newBuilder() to construct.
    private SCFightHu() {
      initFields();
    }
    private SCFightHu(boolean noInit) {}
    
    private static final SCFightHu defaultInstance;
    public static SCFightHu getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightHu getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData huData = 2;
    public static final int HUDATA_FIELD_NUMBER = 2;
    private boolean hasHuData;
    private com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData huData_;
    public boolean hasHuData() { return hasHuData; }
    public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getHuData() { return huData_; }
    
    private void initFields() {
      huData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasHuData()) {
        output.writeMessage(2, getHuData());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasHuData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getHuData());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightHu parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightHu prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightHu result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightHu();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightHu internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightHu();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightHu getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightHu build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightHu buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightHu buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightHu returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightHu) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightHu)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightHu other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasHuData()) {
          mergeHuData(other.getHuData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder();
              if (hasHuData()) {
                subBuilder.mergeFrom(getHuData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHuData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoundCardsData huData = 2;
      public boolean hasHuData() {
        return result.hasHuData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData getHuData() {
        return result.getHuData();
      }
      public Builder setHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHuData = true;
        result.huData_ = value;
        return this;
      }
      public Builder setHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.Builder builderForValue) {
        result.hasHuData = true;
        result.huData_ = builderForValue.build();
        return this;
      }
      public Builder mergeHuData(com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData value) {
        if (result.hasHuData() &&
            result.huData_ != com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance()) {
          result.huData_ =
            com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.newBuilder(result.huData_).mergeFrom(value).buildPartial();
        } else {
          result.huData_ = value;
        }
        result.hasHuData = true;
        return this;
      }
      public Builder clearHuData() {
        result.hasHuData = false;
        result.huData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundCardsData.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightHu)
    }
    
    static {
      defaultInstance = new SCFightHu(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightHu)
  }
  
  public static final class FightGuoRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGuoRequest.newBuilder() to construct.
    private FightGuoRequest() {
      initFields();
    }
    private FightGuoRequest(boolean noInit) {}
    
    private static final FightGuoRequest defaultInstance;
    public static FightGuoRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGuoRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_fieldAccessorTable;
    }
    
    // optional int32 tempGameCount = 1;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 1;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTempGameCount()) {
        output.writeInt32(1, getTempGameCount());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTempGameCount());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.getDefaultInstance()) return this;
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTempGameCount(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tempGameCount = 1;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGuoRequest)
    }
    
    static {
      defaultInstance = new FightGuoRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGuoRequest)
  }
  
  public static final class FightGuoResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightGuoResponse.newBuilder() to construct.
    private FightGuoResponse() {
      initFields();
    }
    private FightGuoResponse(boolean noInit) {}
    
    private static final FightGuoResponse defaultInstance;
    public static FightGuoResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightGuoResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightGuoResponse)
    }
    
    static {
      defaultInstance = new FightGuoResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightGuoResponse)
  }
  
  public static final class SCFightGuo extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightGuo.newBuilder() to construct.
    private SCFightGuo() {
      initFields();
    }
    private SCFightGuo(boolean noInit) {}
    
    private static final SCFightGuo defaultInstance;
    public static SCFightGuo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightGuo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightGuo)
    }
    
    static {
      defaultInstance = new SCFightGuo(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightGuo)
  }
  
  public static final class FightChiRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightChiRequest.newBuilder() to construct.
    private FightChiRequest() {
      initFields();
    }
    private FightChiRequest(boolean noInit) {}
    
    private static final FightChiRequest defaultInstance;
    public static FightChiRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightChiRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_fieldAccessorTable;
    }
    
    // optional int32 tempGameCount = 1;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 1;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    // optional int32 callCardListId = 2;
    public static final int CALLCARDLISTID_FIELD_NUMBER = 2;
    private boolean hasCallCardListId;
    private int callCardListId_ = 0;
    public boolean hasCallCardListId() { return hasCallCardListId; }
    public int getCallCardListId() { return callCardListId_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTempGameCount()) {
        output.writeInt32(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        output.writeInt32(2, getCallCardListId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTempGameCount());
      }
      if (hasCallCardListId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCallCardListId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.getDefaultInstance()) return this;
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        if (other.hasCallCardListId()) {
          setCallCardListId(other.getCallCardListId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setTempGameCount(input.readInt32());
              break;
            }
            case 16: {
              setCallCardListId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tempGameCount = 1;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // optional int32 callCardListId = 2;
      public boolean hasCallCardListId() {
        return result.hasCallCardListId();
      }
      public int getCallCardListId() {
        return result.getCallCardListId();
      }
      public Builder setCallCardListId(int value) {
        result.hasCallCardListId = true;
        result.callCardListId_ = value;
        return this;
      }
      public Builder clearCallCardListId() {
        result.hasCallCardListId = false;
        result.callCardListId_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightChiRequest)
    }
    
    static {
      defaultInstance = new FightChiRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightChiRequest)
  }
  
  public static final class FightChiResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightChiResponse.newBuilder() to construct.
    private FightChiResponse() {
      initFields();
    }
    private FightChiResponse(boolean noInit) {}
    
    private static final FightChiResponse defaultInstance;
    public static FightChiResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightChiResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightChiResponse)
    }
    
    static {
      defaultInstance = new FightChiResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightChiResponse)
  }
  
  public static final class SCFightPointSeat extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightPointSeat.newBuilder() to construct.
    private SCFightPointSeat() {
      initFields();
    }
    private SCFightPointSeat(boolean noInit) {}
    
    private static final SCFightPointSeat defaultInstance;
    public static SCFightPointSeat getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightPointSeat getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    // optional int32 tempGameCount = 2;
    public static final int TEMPGAMECOUNT_FIELD_NUMBER = 2;
    private boolean hasTempGameCount;
    private int tempGameCount_ = 0;
    public boolean hasTempGameCount() { return hasTempGameCount; }
    public int getTempGameCount() { return tempGameCount_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      if (hasTempGameCount()) {
        output.writeInt32(2, getTempGameCount());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      if (hasTempGameCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getTempGameCount());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasTempGameCount()) {
          setTempGameCount(other.getTempGameCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
            case 16: {
              setTempGameCount(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // optional int32 tempGameCount = 2;
      public boolean hasTempGameCount() {
        return result.hasTempGameCount();
      }
      public int getTempGameCount() {
        return result.getTempGameCount();
      }
      public Builder setTempGameCount(int value) {
        result.hasTempGameCount = true;
        result.tempGameCount_ = value;
        return this;
      }
      public Builder clearTempGameCount() {
        result.hasTempGameCount = false;
        result.tempGameCount_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightPointSeat)
    }
    
    static {
      defaultInstance = new SCFightPointSeat(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightPointSeat)
  }
  
  public static final class SCFightDisconnect extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightDisconnect.newBuilder() to construct.
    private SCFightDisconnect() {
      initFields();
    }
    private SCFightDisconnect(boolean noInit) {}
    
    private static final SCFightDisconnect defaultInstance;
    public static SCFightDisconnect getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightDisconnect getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightDisconnect)
    }
    
    static {
      defaultInstance = new SCFightDisconnect(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightDisconnect)
  }
  
  public static final class SCFightScore extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightScore.newBuilder() to construct.
    private SCFightScore() {
      initFields();
    }
    private SCFightScore(boolean noInit) {}
    
    private static final SCFightScore defaultInstance;
    public static SCFightScore getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightScore getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.ScoreData scoreData = 1;
    public static final int SCOREDATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ScoreData> scoreData_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ScoreData> getScoreDataList() {
      return scoreData_;
    }
    public int getScoreDataCount() { return scoreData_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.ScoreData getScoreData(int index) {
      return scoreData_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.ScoreData element : getScoreDataList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.ScoreData element : getScoreDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightScore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightScore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightScore result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightScore();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightScore internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightScore();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightScore getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightScore build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightScore buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightScore buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.scoreData_ != java.util.Collections.EMPTY_LIST) {
          result.scoreData_ =
            java.util.Collections.unmodifiableList(result.scoreData_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightScore returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightScore) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightScore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightScore other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.getDefaultInstance()) return this;
        if (!other.scoreData_.isEmpty()) {
          if (result.scoreData_.isEmpty()) {
            result.scoreData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ScoreData>();
          }
          result.scoreData_.addAll(other.scoreData_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.ScoreData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.ScoreData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addScoreData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.ScoreData scoreData = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ScoreData> getScoreDataList() {
        return java.util.Collections.unmodifiableList(result.scoreData_);
      }
      public int getScoreDataCount() {
        return result.getScoreDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.ScoreData getScoreData(int index) {
        return result.getScoreData(index);
      }
      public Builder setScoreData(int index, com.randioo.mahjong_public_server.protocol.Entity.ScoreData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.scoreData_.set(index, value);
        return this;
      }
      public Builder setScoreData(int index, com.randioo.mahjong_public_server.protocol.Entity.ScoreData.Builder builderForValue) {
        result.scoreData_.set(index, builderForValue.build());
        return this;
      }
      public Builder addScoreData(com.randioo.mahjong_public_server.protocol.Entity.ScoreData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.scoreData_.isEmpty()) {
          result.scoreData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ScoreData>();
        }
        result.scoreData_.add(value);
        return this;
      }
      public Builder addScoreData(com.randioo.mahjong_public_server.protocol.Entity.ScoreData.Builder builderForValue) {
        if (result.scoreData_.isEmpty()) {
          result.scoreData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ScoreData>();
        }
        result.scoreData_.add(builderForValue.build());
        return this;
      }
      public Builder addAllScoreData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.ScoreData> values) {
        if (result.scoreData_.isEmpty()) {
          result.scoreData_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ScoreData>();
        }
        super.addAll(values, result.scoreData_);
        return this;
      }
      public Builder clearScoreData() {
        result.scoreData_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightScore)
    }
    
    static {
      defaultInstance = new SCFightScore(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightScore)
  }
  
  public static final class SCFightChooseCardListOver extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightChooseCardListOver.newBuilder() to construct.
    private SCFightChooseCardListOver() {
      initFields();
    }
    private SCFightChooseCardListOver(boolean noInit) {}
    
    private static final SCFightChooseCardListOver defaultInstance;
    public static SCFightChooseCardListOver getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightChooseCardListOver getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightChooseCardListOver)
    }
    
    static {
      defaultInstance = new SCFightChooseCardListOver(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightChooseCardListOver)
  }
  
  public static final class FightQueryGameConfigRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightQueryGameConfigRequest.newBuilder() to construct.
    private FightQueryGameConfigRequest() {
      initFields();
    }
    private FightQueryGameConfigRequest(boolean noInit) {}
    
    private static final FightQueryGameConfigRequest defaultInstance;
    public static FightQueryGameConfigRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightQueryGameConfigRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightQueryGameConfigRequest)
    }
    
    static {
      defaultInstance = new FightQueryGameConfigRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightQueryGameConfigRequest)
  }
  
  public static final class FightQueryGameConfigResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightQueryGameConfigResponse.newBuilder() to construct.
    private FightQueryGameConfigResponse() {
      initFields();
    }
    private FightQueryGameConfigResponse(boolean noInit) {}
    
    private static final FightQueryGameConfigResponse defaultInstance;
    public static FightQueryGameConfigResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightQueryGameConfigResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.GameConfigData gameConfigData = 2;
    public static final int GAMECONFIGDATA_FIELD_NUMBER = 2;
    private boolean hasGameConfigData;
    private com.randioo.mahjong_public_server.protocol.Entity.GameConfigData gameConfigData_;
    public boolean hasGameConfigData() { return hasGameConfigData; }
    public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData getGameConfigData() { return gameConfigData_; }
    
    // optional int32 currentRoundNumber = 3;
    public static final int CURRENTROUNDNUMBER_FIELD_NUMBER = 3;
    private boolean hasCurrentRoundNumber;
    private int currentRoundNumber_ = 0;
    public boolean hasCurrentRoundNumber() { return hasCurrentRoundNumber; }
    public int getCurrentRoundNumber() { return currentRoundNumber_; }
    
    private void initFields() {
      gameConfigData_ = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      if (hasGameConfigData()) {
        output.writeMessage(2, getGameConfigData());
      }
      if (hasCurrentRoundNumber()) {
        output.writeInt32(3, getCurrentRoundNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      if (hasGameConfigData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGameConfigData());
      }
      if (hasCurrentRoundNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getCurrentRoundNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasGameConfigData()) {
          mergeGameConfigData(other.getGameConfigData());
        }
        if (other.hasCurrentRoundNumber()) {
          setCurrentRoundNumber(other.getCurrentRoundNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.newBuilder();
              if (hasGameConfigData()) {
                subBuilder.mergeFrom(getGameConfigData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameConfigData(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setCurrentRoundNumber(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.GameConfigData gameConfigData = 2;
      public boolean hasGameConfigData() {
        return result.hasGameConfigData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData getGameConfigData() {
        return result.getGameConfigData();
      }
      public Builder setGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameConfigData = true;
        result.gameConfigData_ = value;
        return this;
      }
      public Builder setGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.Builder builderForValue) {
        result.hasGameConfigData = true;
        result.gameConfigData_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData value) {
        if (result.hasGameConfigData() &&
            result.gameConfigData_ != com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance()) {
          result.gameConfigData_ =
            com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.newBuilder(result.gameConfigData_).mergeFrom(value).buildPartial();
        } else {
          result.gameConfigData_ = value;
        }
        result.hasGameConfigData = true;
        return this;
      }
      public Builder clearGameConfigData() {
        result.hasGameConfigData = false;
        result.gameConfigData_ = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance();
        return this;
      }
      
      // optional int32 currentRoundNumber = 3;
      public boolean hasCurrentRoundNumber() {
        return result.hasCurrentRoundNumber();
      }
      public int getCurrentRoundNumber() {
        return result.getCurrentRoundNumber();
      }
      public Builder setCurrentRoundNumber(int value) {
        result.hasCurrentRoundNumber = true;
        result.currentRoundNumber_ = value;
        return this;
      }
      public Builder clearCurrentRoundNumber() {
        result.hasCurrentRoundNumber = false;
        result.currentRoundNumber_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightQueryGameConfigResponse)
    }
    
    static {
      defaultInstance = new FightQueryGameConfigResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightQueryGameConfigResponse)
  }
  
  public static final class SCFightFlowerCount extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightFlowerCount.newBuilder() to construct.
    private SCFightFlowerCount() {
      initFields();
    }
    private SCFightFlowerCount(boolean noInit) {}
    
    private static final SCFightFlowerCount defaultInstance;
    public static SCFightFlowerCount getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightFlowerCount getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_fieldAccessorTable;
    }
    
    // optional int32 flowerCount = 1;
    public static final int FLOWERCOUNT_FIELD_NUMBER = 1;
    private boolean hasFlowerCount;
    private int flowerCount_ = 0;
    public boolean hasFlowerCount() { return hasFlowerCount; }
    public int getFlowerCount() { return flowerCount_; }
    
    // optional int32 seat = 2;
    public static final int SEAT_FIELD_NUMBER = 2;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFlowerCount()) {
        output.writeInt32(1, getFlowerCount());
      }
      if (hasSeat()) {
        output.writeInt32(2, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFlowerCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getFlowerCount());
      }
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.getDefaultInstance()) return this;
        if (other.hasFlowerCount()) {
          setFlowerCount(other.getFlowerCount());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setFlowerCount(input.readInt32());
              break;
            }
            case 16: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 flowerCount = 1;
      public boolean hasFlowerCount() {
        return result.hasFlowerCount();
      }
      public int getFlowerCount() {
        return result.getFlowerCount();
      }
      public Builder setFlowerCount(int value) {
        result.hasFlowerCount = true;
        result.flowerCount_ = value;
        return this;
      }
      public Builder clearFlowerCount() {
        result.hasFlowerCount = false;
        result.flowerCount_ = 0;
        return this;
      }
      
      // optional int32 seat = 2;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightFlowerCount)
    }
    
    static {
      defaultInstance = new SCFightFlowerCount(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightFlowerCount)
  }
  
  public static final class FightClientDispatchRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightClientDispatchRequest.newBuilder() to construct.
    private FightClientDispatchRequest() {
      initFields();
    }
    private FightClientDispatchRequest(boolean noInit) {}
    
    private static final FightClientDispatchRequest defaultInstance;
    public static FightClientDispatchRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightClientDispatchRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.ClientCard cards = 1;
    public static final int CARDS_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ClientCard> cards_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ClientCard> getCardsList() {
      return cards_;
    }
    public int getCardsCount() { return cards_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.ClientCard getCards(int index) {
      return cards_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.ClientCard element : getCardsList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.ClientCard element : getCardsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.cards_ != java.util.Collections.EMPTY_LIST) {
          result.cards_ =
            java.util.Collections.unmodifiableList(result.cards_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (result.cards_.isEmpty()) {
            result.cards_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ClientCard>();
          }
          result.cards_.addAll(other.cards_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.ClientCard.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.ClientCard.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCards(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.ClientCard cards = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.ClientCard> getCardsList() {
        return java.util.Collections.unmodifiableList(result.cards_);
      }
      public int getCardsCount() {
        return result.getCardsCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.ClientCard getCards(int index) {
        return result.getCards(index);
      }
      public Builder setCards(int index, com.randioo.mahjong_public_server.protocol.Entity.ClientCard value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.cards_.set(index, value);
        return this;
      }
      public Builder setCards(int index, com.randioo.mahjong_public_server.protocol.Entity.ClientCard.Builder builderForValue) {
        result.cards_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCards(com.randioo.mahjong_public_server.protocol.Entity.ClientCard value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ClientCard>();
        }
        result.cards_.add(value);
        return this;
      }
      public Builder addCards(com.randioo.mahjong_public_server.protocol.Entity.ClientCard.Builder builderForValue) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ClientCard>();
        }
        result.cards_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCards(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.ClientCard> values) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.ClientCard>();
        }
        super.addAll(values, result.cards_);
        return this;
      }
      public Builder clearCards() {
        result.cards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightClientDispatchRequest)
    }
    
    static {
      defaultInstance = new FightClientDispatchRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightClientDispatchRequest)
  }
  
  public static final class FightClientDispatchResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightClientDispatchResponse.newBuilder() to construct.
    private FightClientDispatchResponse() {
      initFields();
    }
    private FightClientDispatchResponse(boolean noInit) {}
    
    private static final FightClientDispatchResponse defaultInstance;
    public static FightClientDispatchResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightClientDispatchResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1;
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 0;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1;
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightClientDispatchResponse)
    }
    
    static {
      defaultInstance = new FightClientDispatchResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightClientDispatchResponse)
  }
  
  public static final class FightClientTouchCardRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use FightClientTouchCardRequest.newBuilder() to construct.
    private FightClientTouchCardRequest() {
      initFields();
    }
    private FightClientTouchCardRequest(boolean noInit) {}
    
    private static final FightClientTouchCardRequest defaultInstance;
    public static FightClientTouchCardRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightClientTouchCardRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_fieldAccessorTable;
    }
    
    // optional int32 card = 1;
    public static final int CARD_FIELD_NUMBER = 1;
    private boolean hasCard;
    private int card_ = 0;
    public boolean hasCard() { return hasCard; }
    public int getCard() { return card_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCard()) {
        output.writeInt32(1, getCard());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCard()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getCard());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.getDefaultInstance()) return this;
        if (other.hasCard()) {
          setCard(other.getCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCard(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 card = 1;
      public boolean hasCard() {
        return result.hasCard();
      }
      public int getCard() {
        return result.getCard();
      }
      public Builder setCard(int value) {
        result.hasCard = true;
        result.card_ = value;
        return this;
      }
      public Builder clearCard() {
        result.hasCard = false;
        result.card_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightClientTouchCardRequest)
    }
    
    static {
      defaultInstance = new FightClientTouchCardRequest(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightClientTouchCardRequest)
  }
  
  public static final class FightClientTouchCardResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use FightClientTouchCardResponse.newBuilder() to construct.
    private FightClientTouchCardResponse() {
      initFields();
    }
    private FightClientTouchCardResponse(boolean noInit) {}
    
    private static final FightClientTouchCardResponse defaultInstance;
    public static FightClientTouchCardResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public FightClientTouchCardResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1;
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 0;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1;
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.FightClientTouchCardResponse)
    }
    
    static {
      defaultInstance = new FightClientTouchCardResponse(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.FightClientTouchCardResponse)
  }
  
  public static final class SCFightFillFlower extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightFillFlower.newBuilder() to construct.
    private SCFightFillFlower() {
      initFields();
    }
    private SCFightFillFlower(boolean noInit) {}
    
    private static final SCFightFillFlower defaultInstance;
    public static SCFightFillFlower getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightFillFlower getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_fieldAccessorTable;
    }
    
    // repeated int32 cards = 1;
    public static final int CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getCardsList() {
      return cards_;
    }
    public int getCardsCount() { return cards_.size(); }
    public int getCards(int index) {
      return cards_.get(index);
    }
    
    // optional int32 seat = 3;
    public static final int SEAT_FIELD_NUMBER = 3;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int element : getCardsList()) {
        output.writeInt32(1, element);
      }
      if (hasSeat()) {
        output.writeInt32(3, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (int element : getCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getCardsList().size();
      }
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.cards_ != java.util.Collections.EMPTY_LIST) {
          result.cards_ =
            java.util.Collections.unmodifiableList(result.cards_);
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (result.cards_.isEmpty()) {
            result.cards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.cards_.addAll(other.cards_);
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              addCards(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // repeated int32 cards = 1;
      public java.util.List<java.lang.Integer> getCardsList() {
        return java.util.Collections.unmodifiableList(result.cards_);
      }
      public int getCardsCount() {
        return result.getCardsCount();
      }
      public int getCards(int index) {
        return result.getCards(index);
      }
      public Builder setCards(int index, int value) {
        result.cards_.set(index, value);
        return this;
      }
      public Builder addCards(int value) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.cards_.add(value);
        return this;
      }
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.cards_.isEmpty()) {
          result.cards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.cards_);
        return this;
      }
      public Builder clearCards() {
        result.cards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 seat = 3;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightFillFlower)
    }
    
    static {
      defaultInstance = new SCFightFillFlower(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightFillFlower)
  }
  
  public static final class SCFightTing extends
      com.google.protobuf.GeneratedMessage {
    // Use SCFightTing.newBuilder() to construct.
    private SCFightTing() {
      initFields();
    }
    private SCFightTing(boolean noInit) {}
    
    private static final SCFightTing defaultInstance;
    public static SCFightTing getDefaultInstance() {
      return defaultInstance;
    }
    
    public SCFightTing getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Fight.internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_fieldAccessorTable;
    }
    
    // optional int32 seat = 1;
    public static final int SEAT_FIELD_NUMBER = 1;
    private boolean hasSeat;
    private int seat_ = 0;
    public boolean hasSeat() { return hasSeat; }
    public int getSeat() { return seat_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeat()) {
        output.writeInt32(1, getSeat());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getSeat());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Fight.SCFightTing parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Fight.SCFightTing prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightTing result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightTing();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Fight.SCFightTing internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Fight.SCFightTing();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTing getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTing build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Fight.SCFightTing buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Fight.SCFightTing buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Fight.SCFightTing returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Fight.SCFightTing) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Fight.SCFightTing)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Fight.SCFightTing other) {
        if (other == com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.getDefaultInstance()) return this;
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeat(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 seat = 1;
      public boolean hasSeat() {
        return result.hasSeat();
      }
      public int getSeat() {
        return result.getSeat();
      }
      public Builder setSeat(int value) {
        result.hasSeat = true;
        result.seat_ = value;
        return this;
      }
      public Builder clearSeat() {
        result.hasSeat = false;
        result.seat_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.SCFightTing)
    }
    
    static {
      defaultInstance = new SCFightTing(true);
      com.randioo.mahjong_public_server.protocol.Fight.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.SCFightTing)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Fight.proto\022*com.randioo.mahjong_publi" +
      "c_server.protocol\032\014Entity.proto\"\026\n\024Fight" +
      "ExitGameRequest\"-\n\025FightExitGameResponse" +
      "\022\024\n\terrorCode\030\001 \001(\005:\0011\"\033\n\031FightApplyExit" +
      "GameRequest\"2\n\032FightApplyExitGameRespons" +
      "e\022\024\n\terrorCode\030\001 \001(\005:\0011\"\037\n\017SCFightExitGa" +
      "me\022\014\n\004seat\030\001 \001(\005\"\024\n\022SCFightRoomDismiss\"\035" +
      "\n\033FightConfirmGameOverRequest\"\036\n\034FightCo" +
      "nfirmGameOverResponse\"L\n\024SCFightApplyExi" +
      "tGame\022\014\n\004name\030\001 \001(\t\022\021\n\tcountDown\030\002 \001(\005\022\023",
      "\n\013applyExitId\030\003 \001(\005\"\214\001\n\031FightAgreeExitGa" +
      "meRequest\022Z\n\022fightVoteApplyExit\030\001 \001(\0162>." +
      "com.randioo.mahjong_public_server.protoc" +
      "ol.FightVoteApplyExit\022\023\n\013applyExitId\030\002 \001" +
      "(\005\"2\n\032FightAgreeExitGameResponse\022\024\n\terro" +
      "rCode\030\001 \001(\005:\0011\"?\n\026SCFightApplyExitResult" +
      "\022\022\n\nrejectName\030\001 \003(\t\022\021\n\tagreeName\030\002 \003(\t\"" +
      "\024\n\022SCFightClearRoomId\"\025\n\023SCFightLoadReso" +
      "urce\"\023\n\021FightReadyRequest\"*\n\022FightReadyR" +
      "esponse\022\024\n\terrorCode\030\001 \001(\005:\0011\"\024\n\022SCFight",
      "NoticeReady\"\034\n\014SCFightReady\022\014\n\004seat\030\001 \001(" +
      "\005\"\032\n\030FightGetlastRoundRequest\"v\n\031FightGe" +
      "tlastRoundResponse\022\024\n\terrorCode\030\001 \001(\005:\0011" +
      "\022C\n\007records\030\002 \003(\01322.com.randioo.mahjong_" +
      "public_server.protocol.Record\"\027\n\025FightRe" +
      "commandRequest\"~\n\026FightRecommandResponse" +
      "\022\024\n\terrorCode\030\001 \001(\005:\0011\022N\n\014recommandPai\030\002" +
      " \003(\01328.com.randioo.mahjong_public_server" +
      ".protocol.RecommandPai\"\223\002\n\014SCFightStart\022" +
      "Z\n\022fightStartRoleData\030\001 \003(\0132>.com.randio",
      "o.mahjong_public_server.protocol.FightSt" +
      "artRoleData\022\027\n\017remainCardCount\030\002 \001(\005\022\022\n\n" +
      "zhuangSeat\030\003 \001(\005\022\021\n\tbaidaCard\030\004 \001(\005\022\014\n\004d" +
      "ice\030\005 \003(\005\022\026\n\016remainHuangFan\030\006 \001(\005\022\027\n\017cur" +
      "rentRoundNum\030\007 \001(\005\022\020\n\010maxRound\030\010 \001(\005\022\026\n\016" +
      "firstBaiDaCard\030\t \001(\005\"\377\001\n\020SCFightRoundOve" +
      "r\022\022\n\nzhamaCards\030\001 \003(\005\022\020\n\010flyCards\030\002 \003(\005\022" +
      "`\n\025roleRoundOverInfoData\030\003 \003(\0132A.com.ran" +
      "dioo.mahjong_public_server.protocol.Role" +
      "RoundOverInfoData\022\016\n\006roomId\030\004 \001(\t\022\030\n\020fin",
      "ishRoundCount\030\005 \001(\005\022\025\n\rmaxRoundCount\030\006 \001" +
      "(\005\022\020\n\010flyScore\030\007 \001(\005\022\020\n\010huangFan\030\010 \001(\010\"\262" +
      "\001\n\017SCFightGameOver\022^\n\024roleGameOverInfoDa" +
      "ta\030\001 \003(\0132@.com.randioo.mahjong_public_se" +
      "rver.protocol.RoleGameOverInfoData\022\016\n\006ro" +
      "omId\030\002 \001(\t\022\030\n\020finishRoundCount\030\003 \001(\005\022\025\n\r" +
      "maxRoundCount\030\004 \001(\005\"%\n\025SCFightNoticeSend" +
      "Card\022\014\n\004seat\030\001 \001(\005\"S\n\024FightSendCardReque" +
      "st\022\014\n\004card\030\001 \001(\005\022\032\n\013isTouchCard\030\002 \001(\010:\005f" +
      "alse\022\021\n\ttingCards\030\003 \003(\005\"-\n\025FightSendCard",
      "Response\022\024\n\terrorCode\030\001 \001(\005:\0011\"B\n\017SCFigh" +
      "tSendCard\022\014\n\004card\030\001 \001(\005\022\014\n\004seat\030\002 \001(\005\022\023\n" +
      "\013isTouchCard\030\003 \001(\010\"e\n\020SCFightTouchCard\022\014" +
      "\n\004seat\030\001 \001(\005\022\021\n\ttouchCard\030\002 \001(\005\022\027\n\017remai" +
      "nCardCount\030\003 \001(\005\022\027\n\010isFlower\030\004 \001(\010:\005fals" +
      "e\"\346\001\n\033SCFightNoticeChooseCardList\022J\n\ncal" +
      "lHuData\030\001 \003(\01326.com.randioo.mahjong_publ" +
      "ic_server.protocol.CallHuData\022V\n\020callCar" +
      "dListData\030\002 \003(\0132<.com.randioo.mahjong_pu" +
      "blic_server.protocol.CallCardListData\022\014\n",
      "\004seat\030\003 \001(\005\022\025\n\rtempGameCount\030\004 \001(\005\"%\n\020SC" +
      "FightCountdown\022\021\n\tcountdown\030\001 \001(\005\"A\n\020Fig" +
      "htPengRequest\022\025\n\rtempGameCount\030\001 \001(\005\022\026\n\016" +
      "callCardListId\030\002 \001(\005\")\n\021FightPengRespons" +
      "e\022\024\n\terrorCode\030\001 \001(\005:\0011\"o\n\017SCFightCardLi" +
      "st\022\014\n\004seat\030\001 \001(\005\022N\n\014cardListData\030\002 \001(\01328" +
      ".com.randioo.mahjong_public_server.proto" +
      "col.CardListData\"A\n\020FightGangRequest\022\025\n\r" +
      "tempGameCount\030\001 \001(\005\022\026\n\016callCardListId\030\002 " +
      "\001(\005\")\n\021FightGangResponse\022\024\n\terrorCode\030\001 ",
      "\001(\005:\0011\"?\n\016FightHuRequest\022\025\n\rtempGameCoun" +
      "t\030\001 \001(\005\022\026\n\016callCardListId\030\002 \001(\005\"\'\n\017Fight" +
      "HuResponse\022\024\n\terrorCode\030\001 \001(\005:\0011\"e\n\tSCFi" +
      "ghtHu\022\014\n\004seat\030\001 \001(\005\022J\n\006huData\030\002 \001(\0132:.co" +
      "m.randioo.mahjong_public_server.protocol" +
      ".RoundCardsData\"(\n\017FightGuoRequest\022\025\n\rte" +
      "mpGameCount\030\001 \001(\005\"(\n\020FightGuoResponse\022\024\n" +
      "\terrorCode\030\001 \001(\005:\0011\"\032\n\nSCFightGuo\022\014\n\004sea" +
      "t\030\001 \001(\005\"@\n\017FightChiRequest\022\025\n\rtempGameCo" +
      "unt\030\001 \001(\005\022\026\n\016callCardListId\030\002 \001(\005\"(\n\020Fig",
      "htChiResponse\022\024\n\terrorCode\030\001 \001(\005:\0011\"7\n\020S" +
      "CFightPointSeat\022\014\n\004seat\030\001 \001(\005\022\025\n\rtempGam" +
      "eCount\030\002 \001(\005\"!\n\021SCFightDisconnect\022\014\n\004sea" +
      "t\030\001 \001(\005\"X\n\014SCFightScore\022H\n\tscoreData\030\001 \003" +
      "(\01325.com.randioo.mahjong_public_server.p" +
      "rotocol.ScoreData\"\033\n\031SCFightChooseCardLi" +
      "stOver\"\035\n\033FightQueryGameConfigRequest\"\244\001" +
      "\n\034FightQueryGameConfigResponse\022\024\n\terrorC" +
      "ode\030\001 \001(\005:\0011\022R\n\016gameConfigData\030\002 \001(\0132:.c" +
      "om.randioo.mahjong_public_server.protoco",
      "l.GameConfigData\022\032\n\022currentRoundNumber\030\003" +
      " \001(\005\"7\n\022SCFightFlowerCount\022\023\n\013flowerCoun" +
      "t\030\001 \001(\005\022\014\n\004seat\030\002 \001(\005\"c\n\032FightClientDisp" +
      "atchRequest\022E\n\005cards\030\001 \003(\01326.com.randioo" +
      ".mahjong_public_server.protocol.ClientCa" +
      "rd\"0\n\033FightClientDispatchResponse\022\021\n\terr" +
      "orCode\030\001 \001(\005\"+\n\033FightClientTouchCardRequ" +
      "est\022\014\n\004card\030\001 \001(\005\"1\n\034FightClientTouchCar" +
      "dResponse\022\021\n\terrorCode\030\001 \001(\005\"0\n\021SCFightF" +
      "illFlower\022\r\n\005cards\030\001 \003(\005\022\014\n\004seat\030\003 \001(\005\"\033",
      "\n\013SCFightTing\022\014\n\004seat\030\001 \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightExitGameRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightExitGameResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightExitGameResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightApplyExitGameResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightApplyExitGameResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightExitGame_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightExitGame.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoomDismiss_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightRoomDismiss.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightConfirmGameOverResponse_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightConfirmGameOverResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitGame_descriptor,
              new java.lang.String[] { "Name", "CountDown", "ApplyExitId", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitGame.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameRequest_descriptor,
              new java.lang.String[] { "FightVoteApplyExit", "ApplyExitId", },
              com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightAgreeExitGameResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightAgreeExitGameResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightApplyExitResult_descriptor,
              new java.lang.String[] { "RejectName", "AgreeName", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightApplyExitResult.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightClearRoomId_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightClearRoomId.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightLoadResource_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightLoadResource.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightReadyRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightReadyRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightReadyResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightReadyResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeReady_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeReady.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightReady_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightReady.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGetlastRoundResponse_descriptor,
              new java.lang.String[] { "ErrorCode", "Records", },
              com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGetlastRoundResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightRecommandRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightRecommandResponse_descriptor,
              new java.lang.String[] { "ErrorCode", "RecommandPai", },
              com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightRecommandResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightStart_descriptor,
              new java.lang.String[] { "FightStartRoleData", "RemainCardCount", "ZhuangSeat", "BaidaCard", "Dice", "RemainHuangFan", "CurrentRoundNum", "MaxRound", "FirstBaiDaCard", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightStart.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightRoundOver_descriptor,
              new java.lang.String[] { "ZhamaCards", "FlyCards", "RoleRoundOverInfoData", "RoomId", "FinishRoundCount", "MaxRoundCount", "FlyScore", "HuangFan", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightRoundOver.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightGameOver_descriptor,
              new java.lang.String[] { "RoleGameOverInfoData", "RoomId", "FinishRoundCount", "MaxRoundCount", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightGameOver.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_descriptor =
            getDescriptor().getMessageTypes().get(25);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeSendCard_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeSendCard.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_descriptor =
            getDescriptor().getMessageTypes().get(26);
          internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardRequest_descriptor,
              new java.lang.String[] { "Card", "IsTouchCard", "TingCards", },
              com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightSendCardRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_descriptor =
            getDescriptor().getMessageTypes().get(27);
          internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightSendCardResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightSendCardResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_descriptor =
            getDescriptor().getMessageTypes().get(28);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightSendCard_descriptor,
              new java.lang.String[] { "Card", "Seat", "IsTouchCard", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightSendCard.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_descriptor =
            getDescriptor().getMessageTypes().get(29);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightTouchCard_descriptor,
              new java.lang.String[] { "Seat", "TouchCard", "RemainCardCount", "IsFlower", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightTouchCard.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_descriptor =
            getDescriptor().getMessageTypes().get(30);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightNoticeChooseCardList_descriptor,
              new java.lang.String[] { "CallHuData", "CallCardListData", "Seat", "TempGameCount", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightNoticeChooseCardList.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_descriptor =
            getDescriptor().getMessageTypes().get(31);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightCountdown_descriptor,
              new java.lang.String[] { "Countdown", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightCountdown.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_descriptor =
            getDescriptor().getMessageTypes().get(32);
          internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightPengRequest_descriptor,
              new java.lang.String[] { "TempGameCount", "CallCardListId", },
              com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightPengRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_descriptor =
            getDescriptor().getMessageTypes().get(33);
          internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightPengResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightPengResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_descriptor =
            getDescriptor().getMessageTypes().get(34);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightCardList_descriptor,
              new java.lang.String[] { "Seat", "CardListData", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightCardList.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_descriptor =
            getDescriptor().getMessageTypes().get(35);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGangRequest_descriptor,
              new java.lang.String[] { "TempGameCount", "CallCardListId", },
              com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGangRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_descriptor =
            getDescriptor().getMessageTypes().get(36);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGangResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGangResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_descriptor =
            getDescriptor().getMessageTypes().get(37);
          internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightHuRequest_descriptor,
              new java.lang.String[] { "TempGameCount", "CallCardListId", },
              com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightHuRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_descriptor =
            getDescriptor().getMessageTypes().get(38);
          internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightHuResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightHuResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_descriptor =
            getDescriptor().getMessageTypes().get(39);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightHu_descriptor,
              new java.lang.String[] { "Seat", "HuData", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightHu.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_descriptor =
            getDescriptor().getMessageTypes().get(40);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGuoRequest_descriptor,
              new java.lang.String[] { "TempGameCount", },
              com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGuoRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_descriptor =
            getDescriptor().getMessageTypes().get(41);
          internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightGuoResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightGuoResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_descriptor =
            getDescriptor().getMessageTypes().get(42);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightGuo_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightGuo.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_descriptor =
            getDescriptor().getMessageTypes().get(43);
          internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightChiRequest_descriptor,
              new java.lang.String[] { "TempGameCount", "CallCardListId", },
              com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightChiRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_descriptor =
            getDescriptor().getMessageTypes().get(44);
          internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightChiResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightChiResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_descriptor =
            getDescriptor().getMessageTypes().get(45);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightPointSeat_descriptor,
              new java.lang.String[] { "Seat", "TempGameCount", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightPointSeat.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_descriptor =
            getDescriptor().getMessageTypes().get(46);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightDisconnect_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightDisconnect.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_descriptor =
            getDescriptor().getMessageTypes().get(47);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightScore_descriptor,
              new java.lang.String[] { "ScoreData", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightScore.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_descriptor =
            getDescriptor().getMessageTypes().get(48);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightChooseCardListOver_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightChooseCardListOver.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_descriptor =
            getDescriptor().getMessageTypes().get(49);
          internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_descriptor =
            getDescriptor().getMessageTypes().get(50);
          internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightQueryGameConfigResponse_descriptor,
              new java.lang.String[] { "ErrorCode", "GameConfigData", "CurrentRoundNumber", },
              com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightQueryGameConfigResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_descriptor =
            getDescriptor().getMessageTypes().get(51);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightFlowerCount_descriptor,
              new java.lang.String[] { "FlowerCount", "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightFlowerCount.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_descriptor =
            getDescriptor().getMessageTypes().get(52);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchRequest_descriptor,
              new java.lang.String[] { "Cards", },
              com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_descriptor =
            getDescriptor().getMessageTypes().get(53);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightClientDispatchResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightClientDispatchResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_descriptor =
            getDescriptor().getMessageTypes().get(54);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardRequest_descriptor,
              new java.lang.String[] { "Card", },
              com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_descriptor =
            getDescriptor().getMessageTypes().get(55);
          internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_FightClientTouchCardResponse_descriptor,
              new java.lang.String[] { "ErrorCode", },
              com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.class,
              com.randioo.mahjong_public_server.protocol.Fight.FightClientTouchCardResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_descriptor =
            getDescriptor().getMessageTypes().get(56);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightFillFlower_descriptor,
              new java.lang.String[] { "Cards", "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightFillFlower.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_descriptor =
            getDescriptor().getMessageTypes().get(57);
          internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_SCFightTing_descriptor,
              new java.lang.String[] { "Seat", },
              com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.class,
              com.randioo.mahjong_public_server.protocol.Fight.SCFightTing.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.randioo.mahjong_public_server.protocol.Entity.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
